/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

goog.exportSymbol("proto.StockHistory", null, global);
goog.exportSymbol("proto.StockHistory.StockPrice", null, global);
goog.exportSymbol("proto.StockPredictions", null, global);
goog.exportSymbol("proto.StockSymbol", null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StockSymbol = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StockSymbol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StockSymbol.displayName = "proto.StockSymbol";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.StockSymbol.prototype.toObject = function (opt_includeInstance) {
    return proto.StockSymbol.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.StockSymbol} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.StockSymbol.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        stockSymbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StockSymbol}
 */
proto.StockSymbol.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StockSymbol();
  return proto.StockSymbol.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StockSymbol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StockSymbol}
 */
proto.StockSymbol.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setStockSymbol(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StockSymbol.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.StockSymbol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StockSymbol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockSymbol.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStockSymbol();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string stock_symbol = 1;
 * @return {string}
 */
proto.StockSymbol.prototype.getStockSymbol = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.StockSymbol.prototype.setStockSymbol = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StockHistory = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.StockHistory.repeatedFields_,
    null
  );
};
goog.inherits(proto.StockHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StockHistory.displayName = "proto.StockHistory";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StockHistory.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.StockHistory.prototype.toObject = function (opt_includeInstance) {
    return proto.StockHistory.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.StockHistory} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.StockHistory.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        stockHistoryList: jspb.Message.toObjectList(
          msg.getStockHistoryList(),
          proto.StockHistory.StockPrice.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StockHistory}
 */
proto.StockHistory.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StockHistory();
  return proto.StockHistory.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StockHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StockHistory}
 */
proto.StockHistory.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.StockHistory.StockPrice();
        reader.readMessage(
          value,
          proto.StockHistory.StockPrice.deserializeBinaryFromReader
        );
        msg.addStockHistory(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StockHistory.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.StockHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StockHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockHistory.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStockHistoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.StockHistory.StockPrice.serializeBinaryToWriter
    );
  }
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StockHistory.StockPrice = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StockHistory.StockPrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StockHistory.StockPrice.displayName = "proto.StockHistory.StockPrice";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.StockHistory.StockPrice.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.StockHistory.StockPrice.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.StockHistory.StockPrice} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.StockHistory.StockPrice.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        date: jspb.Message.getFieldWithDefault(msg, 1, ""),
        symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
        open: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
        close: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
        low: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
        high: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
        volume: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StockHistory.StockPrice}
 */
proto.StockHistory.StockPrice.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StockHistory.StockPrice();
  return proto.StockHistory.StockPrice.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StockHistory.StockPrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StockHistory.StockPrice}
 */
proto.StockHistory.StockPrice.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDate(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSymbol(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setOpen(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setClose(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setLow(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setHigh(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setVolume(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StockHistory.StockPrice.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.StockHistory.StockPrice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StockHistory.StockPrice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockHistory.StockPrice.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getOpen();
  if (f !== 0.0) {
    writer.writeDouble(3, f);
  }
  f = message.getClose();
  if (f !== 0.0) {
    writer.writeDouble(4, f);
  }
  f = message.getLow();
  if (f !== 0.0) {
    writer.writeDouble(5, f);
  }
  f = message.getHigh();
  if (f !== 0.0) {
    writer.writeDouble(6, f);
  }
  f = message.getVolume();
  if (f !== 0.0) {
    writer.writeDouble(7, f);
  }
};

/**
 * optional string date = 1;
 * @return {string}
 */
proto.StockHistory.StockPrice.prototype.getDate = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.StockHistory.StockPrice.prototype.setDate = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.StockHistory.StockPrice.prototype.getSymbol = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/** @param {string} value */
proto.StockHistory.StockPrice.prototype.setSymbol = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional double open = 3;
 * @return {number}
 */
proto.StockHistory.StockPrice.prototype.getOpen = function () {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    3,
    0.0
  ));
};

/** @param {number} value */
proto.StockHistory.StockPrice.prototype.setOpen = function (value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional double close = 4;
 * @return {number}
 */
proto.StockHistory.StockPrice.prototype.getClose = function () {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    4,
    0.0
  ));
};

/** @param {number} value */
proto.StockHistory.StockPrice.prototype.setClose = function (value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};

/**
 * optional double low = 5;
 * @return {number}
 */
proto.StockHistory.StockPrice.prototype.getLow = function () {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    5,
    0.0
  ));
};

/** @param {number} value */
proto.StockHistory.StockPrice.prototype.setLow = function (value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};

/**
 * optional double high = 6;
 * @return {number}
 */
proto.StockHistory.StockPrice.prototype.getHigh = function () {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    6,
    0.0
  ));
};

/** @param {number} value */
proto.StockHistory.StockPrice.prototype.setHigh = function (value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};

/**
 * optional double volume = 7;
 * @return {number}
 */
proto.StockHistory.StockPrice.prototype.getVolume = function () {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(
    this,
    7,
    0.0
  ));
};

/** @param {number} value */
proto.StockHistory.StockPrice.prototype.setVolume = function (value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};

/**
 * repeated StockPrice stock_history = 1;
 * @return {!Array<!proto.StockHistory.StockPrice>}
 */
proto.StockHistory.prototype.getStockHistoryList = function () {
  return /** @type{!Array<!proto.StockHistory.StockPrice>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.StockHistory.StockPrice,
    1
  ));
};

/** @param {!Array<!proto.StockHistory.StockPrice>} value */
proto.StockHistory.prototype.setStockHistoryList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.StockHistory.StockPrice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.StockHistory.StockPrice}
 */
proto.StockHistory.prototype.addStockHistory = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.StockHistory.StockPrice,
    opt_index
  );
};

proto.StockHistory.prototype.clearStockHistoryList = function () {
  this.setStockHistoryList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StockPredictions = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.StockPredictions.repeatedFields_,
    null
  );
};
goog.inherits(proto.StockPredictions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StockPredictions.displayName = "proto.StockPredictions";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StockPredictions.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.StockPredictions.prototype.toObject = function (opt_includeInstance) {
    return proto.StockPredictions.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.StockPredictions} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.StockPredictions.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        predictionsList: jspb.Message.getRepeatedFloatingPointField(msg, 1),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StockPredictions}
 */
proto.StockPredictions.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StockPredictions();
  return proto.StockPredictions.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StockPredictions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StockPredictions}
 */
proto.StockPredictions.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
        msg.setPredictionsList(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StockPredictions.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.StockPredictions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StockPredictions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockPredictions.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPredictionsList();
  if (f.length > 0) {
    writer.writePackedDouble(1, f);
  }
};

/**
 * repeated double predictions = 1;
 * @return {!Array<number>}
 */
proto.StockPredictions.prototype.getPredictionsList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(
    this,
    1
  ));
};

/** @param {!Array<number>} value */
proto.StockPredictions.prototype.setPredictionsList = function (value) {
  jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.StockPredictions.prototype.addPredictions = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

proto.StockPredictions.prototype.clearPredictionsList = function () {
  this.setPredictionsList([]);
};

goog.object.extend(exports, proto);
