# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import alpr_pb2 as proto_dot_alpr__pb2


class ALPRFileServerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.upload = channel.stream_unary(
        '/ALPRFileServer/upload',
        request_serializer=proto_dot_alpr__pb2.ALPRChunk.SerializeToString,
        response_deserializer=proto_dot_alpr__pb2.ALPRReply.FromString,
        )
    self.download = channel.unary_stream(
        '/ALPRFileServer/download',
        request_serializer=proto_dot_alpr__pb2.ALPRRequest.SerializeToString,
        response_deserializer=proto_dot_alpr__pb2.ALPRChunk.FromString,
        )


class ALPRFileServerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def upload(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def download(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ALPRFileServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'upload': grpc.stream_unary_rpc_method_handler(
          servicer.upload,
          request_deserializer=proto_dot_alpr__pb2.ALPRChunk.FromString,
          response_serializer=proto_dot_alpr__pb2.ALPRReply.SerializeToString,
      ),
      'download': grpc.unary_stream_rpc_method_handler(
          servicer.download,
          request_deserializer=proto_dot_alpr__pb2.ALPRRequest.FromString,
          response_serializer=proto_dot_alpr__pb2.ALPRChunk.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ALPRFileServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
