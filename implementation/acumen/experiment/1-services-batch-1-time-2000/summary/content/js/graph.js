/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function () {
  $(".click-title").mouseenter(function (e) {
    e.preventDefault();
    this.style.cursor = "pointer";
  });
  $(".click-title").mousedown(function (event) {
    event.preventDefault();
  });

  // Ugly code while this script is shared among several pages
  try {
    refreshHitsPerSecond(true);
  } catch (e) {}
  try {
    refreshResponseTimeOverTime(true);
  } catch (e) {}
  try {
    refreshResponseTimePercentiles();
  } catch (e) {}
});

var responseTimePercentilesInfos = {
  data: {
    result: {
      minY: 3376.0,
      minX: 0.0,
      maxY: 120029.0,
      series: [
        {
          data: [
            [0.0, 3376.0],
            [0.1, 3376.0],
            [0.2, 3376.0],
            [0.3, 3376.0],
            [0.4, 3376.0],
            [0.5, 3376.0],
            [0.6, 3376.0],
            [0.7, 3376.0],
            [0.8, 3376.0],
            [0.9, 3381.0],
            [1.0, 3381.0],
            [1.1, 3381.0],
            [1.2, 3381.0],
            [1.3, 3381.0],
            [1.4, 3381.0],
            [1.5, 3381.0],
            [1.6, 3381.0],
            [1.7, 3381.0],
            [1.8, 3485.0],
            [1.9, 3485.0],
            [2.0, 3485.0],
            [2.1, 3485.0],
            [2.2, 3485.0],
            [2.3, 3485.0],
            [2.4, 3485.0],
            [2.5, 3485.0],
            [2.6, 3485.0],
            [2.7, 3566.0],
            [2.8, 3566.0],
            [2.9, 3566.0],
            [3.0, 3566.0],
            [3.1, 3566.0],
            [3.2, 3566.0],
            [3.3, 3566.0],
            [3.4, 3566.0],
            [3.5, 3566.0],
            [3.6, 3685.0],
            [3.7, 3685.0],
            [3.8, 3685.0],
            [3.9, 3685.0],
            [4.0, 3685.0],
            [4.1, 3685.0],
            [4.2, 3685.0],
            [4.3, 3685.0],
            [4.4, 4170.0],
            [4.5, 4170.0],
            [4.6, 4170.0],
            [4.7, 4170.0],
            [4.8, 4170.0],
            [4.9, 4170.0],
            [5.0, 4170.0],
            [5.1, 4170.0],
            [5.2, 4170.0],
            [5.3, 4346.0],
            [5.4, 4346.0],
            [5.5, 4346.0],
            [5.6, 4346.0],
            [5.7, 4346.0],
            [5.8, 4346.0],
            [5.9, 4346.0],
            [6.0, 4346.0],
            [6.1, 4346.0],
            [6.2, 5017.0],
            [6.3, 5017.0],
            [6.4, 5017.0],
            [6.5, 5017.0],
            [6.6, 5017.0],
            [6.7, 5017.0],
            [6.8, 5017.0],
            [6.9, 5017.0],
            [7.0, 5017.0],
            [7.1, 5050.0],
            [7.2, 5050.0],
            [7.3, 5050.0],
            [7.4, 5050.0],
            [7.5, 5050.0],
            [7.6, 5050.0],
            [7.7, 5050.0],
            [7.8, 5050.0],
            [7.9, 5221.0],
            [8.0, 5221.0],
            [8.1, 5221.0],
            [8.2, 5221.0],
            [8.3, 5221.0],
            [8.4, 5221.0],
            [8.5, 5221.0],
            [8.6, 5221.0],
            [8.7, 5221.0],
            [8.8, 5222.0],
            [8.9, 5222.0],
            [9.0, 5222.0],
            [9.1, 5222.0],
            [9.2, 5222.0],
            [9.3, 5222.0],
            [9.4, 5222.0],
            [9.5, 5222.0],
            [9.6, 5222.0],
            [9.7, 5297.0],
            [9.8, 5297.0],
            [9.9, 5297.0],
            [10.0, 5297.0],
            [10.1, 5297.0],
            [10.2, 5297.0],
            [10.3, 5297.0],
            [10.4, 5297.0],
            [10.5, 5297.0],
            [10.6, 5322.0],
            [10.7, 5322.0],
            [10.8, 5322.0],
            [10.9, 5322.0],
            [11.0, 5322.0],
            [11.1, 5322.0],
            [11.2, 5322.0],
            [11.3, 5322.0],
            [11.4, 5322.0],
            [11.5, 5322.0],
            [11.6, 5322.0],
            [11.7, 5322.0],
            [11.8, 5322.0],
            [11.9, 5322.0],
            [12.0, 5322.0],
            [12.1, 5322.0],
            [12.2, 5322.0],
            [12.3, 5323.0],
            [12.4, 5323.0],
            [12.5, 5323.0],
            [12.6, 5323.0],
            [12.7, 5323.0],
            [12.8, 5323.0],
            [12.9, 5323.0],
            [13.0, 5323.0],
            [13.1, 5323.0],
            [13.2, 8044.0],
            [13.3, 8044.0],
            [13.4, 8044.0],
            [13.5, 8044.0],
            [13.6, 8044.0],
            [13.7, 8044.0],
            [13.8, 8044.0],
            [13.9, 8044.0],
            [14.0, 8044.0],
            [14.1, 10237.0],
            [14.2, 10237.0],
            [14.3, 10237.0],
            [14.4, 10237.0],
            [14.5, 10237.0],
            [14.6, 10237.0],
            [14.7, 10237.0],
            [14.8, 10237.0],
            [14.9, 10237.0],
            [15.0, 10340.0],
            [15.1, 10340.0],
            [15.2, 10340.0],
            [15.3, 10340.0],
            [15.4, 10340.0],
            [15.5, 10340.0],
            [15.6, 10340.0],
            [15.7, 10340.0],
            [15.8, 10341.0],
            [15.9, 10341.0],
            [16.0, 10341.0],
            [16.1, 10341.0],
            [16.2, 10341.0],
            [16.3, 10341.0],
            [16.4, 10341.0],
            [16.5, 10341.0],
            [16.6, 10341.0],
            [16.7, 10350.0],
            [16.8, 10350.0],
            [16.9, 10350.0],
            [17.0, 10350.0],
            [17.1, 10350.0],
            [17.2, 10350.0],
            [17.3, 10350.0],
            [17.4, 10350.0],
            [17.5, 10350.0],
            [17.6, 10607.0],
            [17.7, 10607.0],
            [17.8, 10607.0],
            [17.9, 10607.0],
            [18.0, 10607.0],
            [18.1, 10607.0],
            [18.2, 10607.0],
            [18.3, 10607.0],
            [18.4, 10607.0],
            [18.5, 10748.0],
            [18.6, 10748.0],
            [18.7, 10748.0],
            [18.8, 10748.0],
            [18.9, 10748.0],
            [19.0, 10748.0],
            [19.1, 10748.0],
            [19.2, 10748.0],
            [19.3, 10754.0],
            [19.4, 10754.0],
            [19.5, 10754.0],
            [19.6, 10754.0],
            [19.7, 10754.0],
            [19.8, 10754.0],
            [19.9, 10754.0],
            [20.0, 10754.0],
            [20.1, 10754.0],
            [20.2, 10868.0],
            [20.3, 10868.0],
            [20.4, 10868.0],
            [20.5, 10868.0],
            [20.6, 10868.0],
            [20.7, 10868.0],
            [20.8, 10868.0],
            [20.9, 10868.0],
            [21.0, 10868.0],
            [21.1, 11553.0],
            [21.2, 11553.0],
            [21.3, 11553.0],
            [21.4, 11553.0],
            [21.5, 11553.0],
            [21.6, 11553.0],
            [21.7, 11553.0],
            [21.8, 11553.0],
            [21.9, 11553.0],
            [22.0, 14419.0],
            [22.1, 14419.0],
            [22.2, 14419.0],
            [22.3, 14419.0],
            [22.4, 14419.0],
            [22.5, 14419.0],
            [22.6, 14419.0],
            [22.7, 14419.0],
            [22.8, 14419.0],
            [22.9, 17083.0],
            [23.0, 17083.0],
            [23.1, 17083.0],
            [23.2, 17083.0],
            [23.3, 17083.0],
            [23.4, 17083.0],
            [23.5, 17083.0],
            [23.6, 17083.0],
            [23.7, 19745.0],
            [23.8, 19745.0],
            [23.9, 19745.0],
            [24.0, 19745.0],
            [24.1, 19745.0],
            [24.2, 19745.0],
            [24.3, 19745.0],
            [24.4, 19745.0],
            [24.5, 19745.0],
            [24.6, 21158.0],
            [24.7, 21158.0],
            [24.8, 21158.0],
            [24.9, 21158.0],
            [25.0, 21158.0],
            [25.1, 21158.0],
            [25.2, 21158.0],
            [25.3, 21158.0],
            [25.4, 21158.0],
            [25.5, 21192.0],
            [25.6, 21192.0],
            [25.7, 21192.0],
            [25.8, 21192.0],
            [25.9, 21192.0],
            [26.0, 21192.0],
            [26.1, 21192.0],
            [26.2, 21192.0],
            [26.3, 21192.0],
            [26.4, 21195.0],
            [26.5, 21195.0],
            [26.6, 21195.0],
            [26.7, 21195.0],
            [26.8, 21195.0],
            [26.9, 21195.0],
            [27.0, 21195.0],
            [27.1, 21195.0],
            [27.2, 21196.0],
            [27.3, 21196.0],
            [27.4, 21196.0],
            [27.5, 21196.0],
            [27.6, 21196.0],
            [27.7, 21196.0],
            [27.8, 21196.0],
            [27.9, 21196.0],
            [28.0, 21196.0],
            [28.1, 21196.0],
            [28.2, 21196.0],
            [28.3, 21196.0],
            [28.4, 21196.0],
            [28.5, 21196.0],
            [28.6, 21196.0],
            [28.7, 21196.0],
            [28.8, 21196.0],
            [28.9, 21196.0],
            [29.0, 21289.0],
            [29.1, 21289.0],
            [29.2, 21289.0],
            [29.3, 21289.0],
            [29.4, 21289.0],
            [29.5, 21289.0],
            [29.6, 21289.0],
            [29.7, 21289.0],
            [29.8, 21289.0],
            [29.9, 21296.0],
            [30.0, 21296.0],
            [30.1, 21296.0],
            [30.2, 21296.0],
            [30.3, 21296.0],
            [30.4, 21296.0],
            [30.5, 21296.0],
            [30.6, 21296.0],
            [30.7, 21296.0],
            [30.8, 21299.0],
            [30.9, 21299.0],
            [31.0, 21299.0],
            [31.1, 21299.0],
            [31.2, 21299.0],
            [31.3, 21299.0],
            [31.4, 21299.0],
            [31.5, 21299.0],
            [31.6, 23702.0],
            [31.7, 23702.0],
            [31.8, 23702.0],
            [31.9, 23702.0],
            [32.0, 23702.0],
            [32.1, 23702.0],
            [32.2, 23702.0],
            [32.3, 23702.0],
            [32.4, 23702.0],
            [32.5, 26368.0],
            [32.6, 26368.0],
            [32.7, 26368.0],
            [32.8, 26368.0],
            [32.9, 26368.0],
            [33.0, 26368.0],
            [33.1, 26368.0],
            [33.2, 26368.0],
            [33.3, 26368.0],
            [33.4, 28931.0],
            [33.5, 28931.0],
            [33.6, 28931.0],
            [33.7, 28931.0],
            [33.8, 28931.0],
            [33.9, 28931.0],
            [34.0, 28931.0],
            [34.1, 28931.0],
            [34.2, 28931.0],
            [34.3, 31488.0],
            [34.4, 31488.0],
            [34.5, 31488.0],
            [34.6, 31488.0],
            [34.7, 31488.0],
            [34.8, 31488.0],
            [34.9, 31488.0],
            [35.0, 31488.0],
            [35.1, 34151.0],
            [35.2, 34151.0],
            [35.3, 34151.0],
            [35.4, 34151.0],
            [35.5, 34151.0],
            [35.6, 34151.0],
            [35.7, 34151.0],
            [35.8, 34151.0],
            [35.9, 34151.0],
            [36.0, 36805.0],
            [36.1, 36805.0],
            [36.2, 36805.0],
            [36.3, 36805.0],
            [36.4, 36805.0],
            [36.5, 36805.0],
            [36.6, 36805.0],
            [36.7, 36805.0],
            [36.8, 36805.0],
            [36.9, 39579.0],
            [37.0, 39579.0],
            [37.1, 39579.0],
            [37.2, 39579.0],
            [37.3, 39579.0],
            [37.4, 39579.0],
            [37.5, 39579.0],
            [37.6, 39579.0],
            [37.7, 39579.0],
            [37.8, 42082.0],
            [37.9, 42082.0],
            [38.0, 42082.0],
            [38.1, 42082.0],
            [38.2, 42082.0],
            [38.3, 42082.0],
            [38.4, 42082.0],
            [38.5, 42082.0],
            [38.6, 42190.0],
            [38.7, 42190.0],
            [38.8, 42190.0],
            [38.9, 42190.0],
            [39.0, 42190.0],
            [39.1, 42190.0],
            [39.2, 42190.0],
            [39.3, 42190.0],
            [39.4, 42190.0],
            [39.5, 42239.0],
            [39.6, 42239.0],
            [39.7, 42239.0],
            [39.8, 42239.0],
            [39.9, 42239.0],
            [40.0, 42239.0],
            [40.1, 42239.0],
            [40.2, 42239.0],
            [40.3, 42239.0],
            [40.4, 42291.0],
            [40.5, 42291.0],
            [40.6, 42291.0],
            [40.7, 42291.0],
            [40.8, 42291.0],
            [40.9, 42291.0],
            [41.0, 42291.0],
            [41.1, 42291.0],
            [41.2, 42291.0],
            [41.3, 42391.0],
            [41.4, 42391.0],
            [41.5, 42391.0],
            [41.6, 42391.0],
            [41.7, 42391.0],
            [41.8, 42391.0],
            [41.9, 42391.0],
            [42.0, 42391.0],
            [42.1, 42391.0],
            [42.2, 42393.0],
            [42.3, 42393.0],
            [42.4, 42393.0],
            [42.5, 42393.0],
            [42.6, 42393.0],
            [42.7, 42393.0],
            [42.8, 42393.0],
            [42.9, 42393.0],
            [43.0, 42493.0],
            [43.1, 42493.0],
            [43.2, 42493.0],
            [43.3, 42493.0],
            [43.4, 42493.0],
            [43.5, 42493.0],
            [43.6, 42493.0],
            [43.7, 42493.0],
            [43.8, 42493.0],
            [43.9, 42636.0],
            [44.0, 42636.0],
            [44.1, 42636.0],
            [44.2, 42636.0],
            [44.3, 42636.0],
            [44.4, 42636.0],
            [44.5, 42636.0],
            [44.6, 42636.0],
            [44.7, 42636.0],
            [44.8, 43129.0],
            [44.9, 43129.0],
            [45.0, 43129.0],
            [45.1, 43129.0],
            [45.2, 43129.0],
            [45.3, 43129.0],
            [45.4, 43129.0],
            [45.5, 43129.0],
            [45.6, 43129.0],
            [45.7, 45788.0],
            [45.8, 45788.0],
            [45.9, 45788.0],
            [46.0, 45788.0],
            [46.1, 45788.0],
            [46.2, 45788.0],
            [46.3, 45788.0],
            [46.4, 45788.0],
            [46.5, 48348.0],
            [46.6, 48348.0],
            [46.7, 48348.0],
            [46.8, 48348.0],
            [46.9, 48348.0],
            [47.0, 48348.0],
            [47.1, 48348.0],
            [47.2, 48348.0],
            [47.3, 48348.0],
            [47.4, 51012.0],
            [47.5, 51012.0],
            [47.6, 51012.0],
            [47.7, 51012.0],
            [47.8, 51012.0],
            [47.9, 51012.0],
            [48.0, 51012.0],
            [48.1, 51012.0],
            [48.2, 51012.0],
            [48.3, 53572.0],
            [48.4, 53572.0],
            [48.5, 53572.0],
            [48.6, 53572.0],
            [48.7, 53572.0],
            [48.8, 53572.0],
            [48.9, 53572.0],
            [49.0, 53572.0],
            [49.1, 53572.0],
            [49.2, 56232.0],
            [49.3, 56232.0],
            [49.4, 56232.0],
            [49.5, 56232.0],
            [49.6, 56232.0],
            [49.7, 56232.0],
            [49.8, 56232.0],
            [49.9, 56232.0],
            [50.0, 58896.0],
            [50.1, 58896.0],
            [50.2, 58896.0],
            [50.3, 58896.0],
            [50.4, 58896.0],
            [50.5, 58896.0],
            [50.6, 58896.0],
            [50.7, 58896.0],
            [50.8, 58896.0],
            [50.9, 61351.0],
            [51.0, 61351.0],
            [51.1, 61351.0],
            [51.2, 61351.0],
            [51.3, 61351.0],
            [51.4, 61351.0],
            [51.5, 61351.0],
            [51.6, 61351.0],
            [51.7, 61351.0],
            [51.8, 64006.0],
            [51.9, 64006.0],
            [52.0, 64006.0],
            [52.1, 64006.0],
            [52.2, 64006.0],
            [52.3, 64006.0],
            [52.4, 64006.0],
            [52.5, 64006.0],
            [52.6, 64006.0],
            [52.7, 66678.0],
            [52.8, 66678.0],
            [52.9, 66678.0],
            [53.0, 66678.0],
            [53.1, 66678.0],
            [53.2, 66678.0],
            [53.3, 66678.0],
            [53.4, 66678.0],
            [53.5, 66678.0],
            [53.6, 69330.0],
            [53.7, 69330.0],
            [53.8, 69330.0],
            [53.9, 69330.0],
            [54.0, 69330.0],
            [54.1, 69330.0],
            [54.2, 69330.0],
            [54.3, 69330.0],
            [54.4, 72099.0],
            [54.5, 72099.0],
            [54.6, 72099.0],
            [54.7, 72099.0],
            [54.8, 72099.0],
            [54.9, 72099.0],
            [55.0, 72099.0],
            [55.1, 72099.0],
            [55.2, 72099.0],
            [55.3, 74763.0],
            [55.4, 74763.0],
            [55.5, 74763.0],
            [55.6, 74763.0],
            [55.7, 74763.0],
            [55.8, 74763.0],
            [55.9, 74763.0],
            [56.0, 74763.0],
            [56.1, 74763.0],
            [56.2, 77311.0],
            [56.3, 77311.0],
            [56.4, 77311.0],
            [56.5, 77311.0],
            [56.6, 77311.0],
            [56.7, 77311.0],
            [56.8, 77311.0],
            [56.9, 77311.0],
            [57.0, 77311.0],
            [57.1, 79865.0],
            [57.2, 79865.0],
            [57.3, 79865.0],
            [57.4, 79865.0],
            [57.5, 79865.0],
            [57.6, 79865.0],
            [57.7, 79865.0],
            [57.8, 79865.0],
            [57.9, 82530.0],
            [58.0, 82530.0],
            [58.1, 82530.0],
            [58.2, 82530.0],
            [58.3, 82530.0],
            [58.4, 82530.0],
            [58.5, 82530.0],
            [58.6, 82530.0],
            [58.7, 82530.0],
            [58.8, 84069.0],
            [58.9, 84069.0],
            [59.0, 84069.0],
            [59.1, 84069.0],
            [59.2, 84069.0],
            [59.3, 84069.0],
            [59.4, 84069.0],
            [59.5, 84069.0],
            [59.6, 84069.0],
            [59.7, 84111.0],
            [59.8, 84111.0],
            [59.9, 84111.0],
            [60.0, 84111.0],
            [60.1, 84111.0],
            [60.2, 84111.0],
            [60.3, 84111.0],
            [60.4, 84111.0],
            [60.5, 84111.0],
            [60.6, 84174.0],
            [60.7, 84174.0],
            [60.8, 84174.0],
            [60.9, 84174.0],
            [61.0, 84174.0],
            [61.1, 84174.0],
            [61.2, 84174.0],
            [61.3, 84174.0],
            [61.4, 84174.0],
            [61.5, 84176.0],
            [61.6, 84176.0],
            [61.7, 84176.0],
            [61.8, 84176.0],
            [61.9, 84176.0],
            [62.0, 84176.0],
            [62.1, 84176.0],
            [62.2, 84176.0],
            [62.3, 84375.0],
            [62.4, 84375.0],
            [62.5, 84375.0],
            [62.6, 84375.0],
            [62.7, 84375.0],
            [62.8, 84375.0],
            [62.9, 84375.0],
            [63.0, 84375.0],
            [63.1, 84375.0],
            [63.2, 84376.0],
            [63.3, 84376.0],
            [63.4, 84376.0],
            [63.5, 84376.0],
            [63.6, 84376.0],
            [63.7, 84376.0],
            [63.8, 84376.0],
            [63.9, 84376.0],
            [64.0, 84376.0],
            [64.1, 84478.0],
            [64.2, 84478.0],
            [64.3, 84478.0],
            [64.4, 84478.0],
            [64.5, 84478.0],
            [64.6, 84478.0],
            [64.7, 84478.0],
            [64.8, 84478.0],
            [64.9, 84478.0],
            [65.0, 84487.0],
            [65.1, 84487.0],
            [65.2, 84487.0],
            [65.3, 84487.0],
            [65.4, 84487.0],
            [65.5, 84487.0],
            [65.6, 84487.0],
            [65.7, 84487.0],
            [65.8, 86621.0],
            [65.9, 86621.0],
            [66.0, 86621.0],
            [66.1, 86621.0],
            [66.2, 86621.0],
            [66.3, 86621.0],
            [66.4, 86621.0],
            [66.5, 86621.0],
            [66.6, 86621.0],
            [66.7, 89077.0],
            [66.8, 89077.0],
            [66.9, 89077.0],
            [67.0, 89077.0],
            [67.1, 89077.0],
            [67.2, 89077.0],
            [67.3, 89077.0],
            [67.4, 89077.0],
            [67.5, 89077.0],
            [67.6, 91843.0],
            [67.7, 91843.0],
            [67.8, 91843.0],
            [67.9, 91843.0],
            [68.0, 91843.0],
            [68.1, 91843.0],
            [68.2, 91843.0],
            [68.3, 91843.0],
            [68.4, 91843.0],
            [68.5, 94505.0],
            [68.6, 94505.0],
            [68.7, 94505.0],
            [68.8, 94505.0],
            [68.9, 94505.0],
            [69.0, 94505.0],
            [69.1, 94505.0],
            [69.2, 94505.0],
            [69.3, 97069.0],
            [69.4, 97069.0],
            [69.5, 97069.0],
            [69.6, 97069.0],
            [69.7, 97069.0],
            [69.8, 97069.0],
            [69.9, 97069.0],
            [70.0, 97069.0],
            [70.1, 97069.0],
            [70.2, 99727.0],
            [70.3, 99727.0],
            [70.4, 99727.0],
            [70.5, 99727.0],
            [70.6, 99727.0],
            [70.7, 99727.0],
            [70.8, 99727.0],
            [70.9, 99727.0],
            [71.0, 99727.0],
            [71.1, 102495.0],
            [71.2, 102495.0],
            [71.3, 102495.0],
            [71.4, 102495.0],
            [71.5, 102495.0],
            [71.6, 102495.0],
            [71.7, 102495.0],
            [71.8, 102495.0],
            [71.9, 102495.0],
            [72.0, 105054.0],
            [72.1, 105054.0],
            [72.2, 105054.0],
            [72.3, 105054.0],
            [72.4, 105054.0],
            [72.5, 105054.0],
            [72.6, 105054.0],
            [72.7, 105054.0],
            [72.8, 105054.0],
            [72.9, 107715.0],
            [73.0, 107715.0],
            [73.1, 107715.0],
            [73.2, 107715.0],
            [73.3, 107715.0],
            [73.4, 107715.0],
            [73.5, 107715.0],
            [73.6, 107715.0],
            [73.7, 110479.0],
            [73.8, 110479.0],
            [73.9, 110479.0],
            [74.0, 110479.0],
            [74.1, 110479.0],
            [74.2, 110479.0],
            [74.3, 110479.0],
            [74.4, 110479.0],
            [74.5, 110479.0],
            [74.6, 112937.0],
            [74.7, 112937.0],
            [74.8, 112937.0],
            [74.9, 112937.0],
            [75.0, 112937.0],
            [75.1, 112937.0],
            [75.2, 112937.0],
            [75.3, 112937.0],
            [75.4, 112937.0],
            [75.5, 115693.0],
            [75.6, 115693.0],
            [75.7, 115693.0],
            [75.8, 115693.0],
            [75.9, 115693.0],
            [76.0, 115693.0],
            [76.1, 115693.0],
            [76.2, 115693.0],
            [76.3, 115693.0],
            [76.4, 118351.0],
            [76.5, 118351.0],
            [76.6, 118351.0],
            [76.7, 118351.0],
            [76.8, 118351.0],
            [76.9, 118351.0],
            [77.0, 118351.0],
            [77.1, 118351.0],
            [77.2, 120003.0],
            [77.3, 120003.0],
            [77.4, 120003.0],
            [77.5, 120003.0],
            [77.6, 120003.0],
            [77.7, 120003.0],
            [77.8, 120003.0],
            [77.9, 120003.0],
            [78.0, 120003.0],
            [78.1, 120004.0],
            [78.2, 120004.0],
            [78.3, 120004.0],
            [78.4, 120004.0],
            [78.5, 120004.0],
            [78.6, 120004.0],
            [78.7, 120004.0],
            [78.8, 120004.0],
            [78.9, 120004.0],
            [79.0, 120005.0],
            [79.1, 120005.0],
            [79.2, 120005.0],
            [79.3, 120005.0],
            [79.4, 120005.0],
            [79.5, 120005.0],
            [79.6, 120005.0],
            [79.7, 120005.0],
            [79.8, 120005.0],
            [79.9, 120006.0],
            [80.0, 120006.0],
            [80.1, 120006.0],
            [80.2, 120006.0],
            [80.3, 120006.0],
            [80.4, 120006.0],
            [80.5, 120006.0],
            [80.6, 120006.0],
            [80.7, 120006.0],
            [80.8, 120006.0],
            [80.9, 120006.0],
            [81.0, 120006.0],
            [81.1, 120006.0],
            [81.2, 120006.0],
            [81.3, 120006.0],
            [81.4, 120006.0],
            [81.5, 120006.0],
            [81.6, 120006.0],
            [81.7, 120006.0],
            [81.8, 120006.0],
            [81.9, 120006.0],
            [82.0, 120006.0],
            [82.1, 120006.0],
            [82.2, 120006.0],
            [82.3, 120006.0],
            [82.4, 120006.0],
            [82.5, 120007.0],
            [82.6, 120007.0],
            [82.7, 120007.0],
            [82.8, 120007.0],
            [82.9, 120007.0],
            [83.0, 120007.0],
            [83.1, 120007.0],
            [83.2, 120007.0],
            [83.3, 120007.0],
            [83.4, 120021.0],
            [83.5, 120021.0],
            [83.6, 120021.0],
            [83.7, 120021.0],
            [83.8, 120021.0],
            [83.9, 120021.0],
            [84.0, 120021.0],
            [84.1, 120021.0],
            [84.2, 120021.0],
            [84.3, 120022.0],
            [84.4, 120022.0],
            [84.5, 120022.0],
            [84.6, 120022.0],
            [84.7, 120022.0],
            [84.8, 120022.0],
            [84.9, 120022.0],
            [85.0, 120022.0],
            [85.1, 120023.0],
            [85.2, 120023.0],
            [85.3, 120023.0],
            [85.4, 120023.0],
            [85.5, 120023.0],
            [85.6, 120023.0],
            [85.7, 120023.0],
            [85.8, 120023.0],
            [85.9, 120023.0],
            [86.0, 120024.0],
            [86.1, 120024.0],
            [86.2, 120024.0],
            [86.3, 120024.0],
            [86.4, 120024.0],
            [86.5, 120024.0],
            [86.6, 120024.0],
            [86.7, 120024.0],
            [86.8, 120024.0],
            [86.9, 120024.0],
            [87.0, 120024.0],
            [87.1, 120024.0],
            [87.2, 120024.0],
            [87.3, 120024.0],
            [87.4, 120024.0],
            [87.5, 120024.0],
            [87.6, 120024.0],
            [87.7, 120024.0],
            [87.8, 120025.0],
            [87.9, 120025.0],
            [88.0, 120025.0],
            [88.1, 120025.0],
            [88.2, 120025.0],
            [88.3, 120025.0],
            [88.4, 120025.0],
            [88.5, 120025.0],
            [88.6, 120025.0],
            [88.7, 120025.0],
            [88.8, 120025.0],
            [88.9, 120025.0],
            [89.0, 120025.0],
            [89.1, 120025.0],
            [89.2, 120025.0],
            [89.3, 120025.0],
            [89.4, 120025.0],
            [89.5, 120025.0],
            [89.6, 120025.0],
            [89.7, 120025.0],
            [89.8, 120025.0],
            [89.9, 120025.0],
            [90.0, 120025.0],
            [90.1, 120025.0],
            [90.2, 120025.0],
            [90.3, 120025.0],
            [90.4, 120025.0],
            [90.5, 120025.0],
            [90.6, 120025.0],
            [90.7, 120025.0],
            [90.8, 120025.0],
            [90.9, 120025.0],
            [91.0, 120025.0],
            [91.1, 120025.0],
            [91.2, 120025.0],
            [91.3, 120025.0],
            [91.4, 120025.0],
            [91.5, 120025.0],
            [91.6, 120025.0],
            [91.7, 120025.0],
            [91.8, 120025.0],
            [91.9, 120025.0],
            [92.0, 120025.0],
            [92.1, 120025.0],
            [92.2, 120026.0],
            [92.3, 120026.0],
            [92.4, 120026.0],
            [92.5, 120026.0],
            [92.6, 120026.0],
            [92.7, 120026.0],
            [92.8, 120026.0],
            [92.9, 120026.0],
            [93.0, 120026.0],
            [93.1, 120026.0],
            [93.2, 120026.0],
            [93.3, 120026.0],
            [93.4, 120026.0],
            [93.5, 120026.0],
            [93.6, 120026.0],
            [93.7, 120026.0],
            [93.8, 120026.0],
            [93.9, 120026.0],
            [94.0, 120026.0],
            [94.1, 120026.0],
            [94.2, 120026.0],
            [94.3, 120026.0],
            [94.4, 120026.0],
            [94.5, 120026.0],
            [94.6, 120026.0],
            [94.7, 120026.0],
            [94.8, 120027.0],
            [94.9, 120027.0],
            [95.0, 120027.0],
            [95.1, 120027.0],
            [95.2, 120027.0],
            [95.3, 120027.0],
            [95.4, 120027.0],
            [95.5, 120027.0],
            [95.6, 120027.0],
            [95.7, 120027.0],
            [95.8, 120027.0],
            [95.9, 120027.0],
            [96.0, 120027.0],
            [96.1, 120027.0],
            [96.2, 120027.0],
            [96.3, 120027.0],
            [96.4, 120027.0],
            [96.5, 120027.0],
            [96.6, 120027.0],
            [96.7, 120027.0],
            [96.8, 120027.0],
            [96.9, 120027.0],
            [97.0, 120027.0],
            [97.1, 120027.0],
            [97.2, 120027.0],
            [97.3, 120027.0],
            [97.4, 120028.0],
            [97.5, 120028.0],
            [97.6, 120028.0],
            [97.7, 120028.0],
            [97.8, 120028.0],
            [97.9, 120028.0],
            [98.0, 120028.0],
            [98.1, 120028.0],
            [98.2, 120028.0],
            [98.3, 120028.0],
            [98.4, 120028.0],
            [98.5, 120028.0],
            [98.6, 120028.0],
            [98.7, 120028.0],
            [98.8, 120028.0],
            [98.9, 120028.0],
            [99.0, 120028.0],
            [99.1, 120028.0],
            [99.2, 120029.0],
            [99.3, 120029.0],
            [99.4, 120029.0],
            [99.5, 120029.0],
            [99.6, 120029.0],
            [99.7, 120029.0],
            [99.8, 120029.0],
            [99.9, 120029.0],
          ],
          isOverall: false,
          label: "HTTP Request",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      maxX: 100.0,
      title: "Response Time Percentiles",
    },
  },
  getOptions: function () {
    return {
      series: {
        points: { show: false },
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendResponseTimePercentiles",
      },
      xaxis: {
        tickDecimals: 1,
        axisLabel: "Percentiles",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Percentile value in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : %x.2 percentile was %y ms",
      },
      selection: { mode: "xy" },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesResponseTimePercentiles")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotResponseTimesPercentiles"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewResponseTimesPercentiles"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
  $(function () {
    $(elementId).text("No graph series with filter=" + seriesFilter);
  });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
  var infos = responseTimePercentilesInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyResponseTimePercentiles");
    return;
  }
  if (isGraph($("#flotResponseTimesPercentiles"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesResponseTimePercentiles");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotResponseTimesPercentiles",
      "#overviewResponseTimesPercentiles"
    );
    $("#bodyResponseTimePercentiles .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var responseTimeDistributionInfos = {
  data: {
    result: {
      minY: 1.0,
      minX: 3300.0,
      maxY: 26.0,
      series: [
        {
          data: [
            [3300.0, 2.0],
            [3400.0, 1.0],
            [3500.0, 1.0],
            [3600.0, 1.0],
            [4100.0, 1.0],
            [4300.0, 1.0],
            [69300.0, 1.0],
            [74700.0, 1.0],
            [77300.0, 1.0],
            [5000.0, 2.0],
            [5300.0, 3.0],
            [5200.0, 3.0],
            [82500.0, 1.0],
            [84100.0, 3.0],
            [84300.0, 2.0],
            [94500.0, 1.0],
            [99700.0, 1.0],
            [107700.0, 1.0],
            [112900.0, 1.0],
            [118300.0, 1.0],
            [8000.0, 1.0],
            [10200.0, 1.0],
            [10700.0, 2.0],
            [10600.0, 1.0],
            [10300.0, 3.0],
            [10800.0, 1.0],
            [11500.0, 1.0],
            [14400.0, 1.0],
            [17000.0, 1.0],
            [19700.0, 1.0],
            [21100.0, 5.0],
            [21200.0, 3.0],
            [23700.0, 1.0],
            [26300.0, 1.0],
            [28900.0, 1.0],
            [31400.0, 1.0],
            [34100.0, 1.0],
            [36800.0, 1.0],
            [39500.0, 1.0],
            [42200.0, 2.0],
            [42600.0, 1.0],
            [42300.0, 2.0],
            [42100.0, 1.0],
            [42400.0, 1.0],
            [42000.0, 1.0],
            [43100.0, 1.0],
            [45700.0, 1.0],
            [48300.0, 1.0],
            [51000.0, 1.0],
            [53500.0, 1.0],
            [56200.0, 1.0],
            [58800.0, 1.0],
            [61300.0, 1.0],
            [64000.0, 1.0],
            [66600.0, 1.0],
            [72000.0, 1.0],
            [79800.0, 1.0],
            [84000.0, 1.0],
            [84400.0, 2.0],
            [86600.0, 1.0],
            [89000.0, 1.0],
            [91800.0, 1.0],
            [97000.0, 1.0],
            [102400.0, 1.0],
            [105000.0, 1.0],
            [110400.0, 1.0],
            [115600.0, 1.0],
            [120000.0, 26.0],
          ],
          isOverall: false,
          label: "HTTP Request",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      granularity: 100,
      maxX: 120000.0,
      title: "Response Time Distribution",
    },
  },
  getOptions: function () {
    var granularity = this.data.result.granularity;
    return {
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendResponseTimeDistribution",
      },
      xaxis: {
        axisLabel: "Response times in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Number of responses",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      bars: {
        show: true,
        barWidth: this.data.result.granularity,
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: function (label, xval, yval, flotItem) {
          return (
            yval +
            " responses for " +
            label +
            " were between " +
            xval +
            " and " +
            (xval + granularity) +
            " ms"
          );
        },
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot(
      $("#flotResponseTimeDistribution"),
      prepareData(data.result.series, $("#choicesResponseTimeDistribution")),
      options
    );
  },
};

// Response time distribution
function refreshResponseTimeDistribution() {
  var infos = responseTimeDistributionInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyResponseTimeDistribution");
    return;
  }
  if (isGraph($("#flotResponseTimeDistribution"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesResponseTimeDistribution");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    $("#footerResponseTimeDistribution .legendColorBox > div").each(function (
      i
    ) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var syntheticResponseTimeDistributionInfos = {
  data: {
    result: {
      minY: 26.0,
      minX: 2.0,
      ticks: [
        [0, "Requests having \nresponse time <= 500ms"],
        [1, "Requests having \nresponse time > 500ms and <= 1,500ms"],
        [2, "Requests having \nresponse time > 1,500ms"],
        [3, "Requests in error"],
      ],
      maxY: 88.0,
      series: [
        {
          data: [],
          color: "#9ACD32",
          isOverall: false,
          label: "Requests having \nresponse time <= 500ms",
          isController: false,
        },
        {
          data: [],
          color: "yellow",
          isOverall: false,
          label: "Requests having \nresponse time > 500ms and <= 1,500ms",
          isController: false,
        },
        {
          data: [[2.0, 88.0]],
          color: "orange",
          isOverall: false,
          label: "Requests having \nresponse time > 1,500ms",
          isController: false,
        },
        {
          data: [[3.0, 26.0]],
          color: "#FF6347",
          isOverall: false,
          label: "Requests in error",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      maxX: 3.0,
      title: "Synthetic Response Times Distribution",
    },
  },
  getOptions: function () {
    return {
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendSyntheticResponseTimeDistribution",
      },
      xaxis: {
        axisLabel: "Response times ranges",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
        tickLength: 0,
        min: -0.5,
        max: 3.5,
      },
      yaxis: {
        axisLabel: "Number of responses",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      bars: {
        show: true,
        align: "center",
        barWidth: 0.25,
        fill: 0.75,
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: function (label, xval, yval, flotItem) {
          return yval + " " + label;
        },
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var options = this.getOptions();
    prepareOptions(options, data);
    options.xaxis.ticks = data.result.ticks;
    $.plot(
      $("#flotSyntheticResponseTimeDistribution"),
      prepareData(
        data.result.series,
        $("#choicesSyntheticResponseTimeDistribution")
      ),
      options
    );
  },
};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
  var infos = syntheticResponseTimeDistributionInfos;
  prepareSeries(infos.data, true);
  if (isGraph($("#flotSyntheticResponseTimeDistribution"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    $("#footerSyntheticResponseTimeDistribution .legendColorBox > div").each(
      function (i) {
        $(this).clone().prependTo(choiceContainer.find("li").eq(i));
      }
    );
  }
}

var activeThreadsOverTimeInfos = {
  data: {
    result: {
      minY: 1.4444444444444444,
      minX: 1.5891678e12,
      maxY: 49.0,
      series: [
        {
          data: [
            [1.58916792e12, 44.26086956521739],
            [1.58916798e12, 49.0],
            [1.5891678e12, 1.4444444444444444],
            [1.58916786e12, 6.727272727272728],
            [1.58916804e12, 19.351351351351347],
          ],
          isOverall: false,
          label: "jp@gc - Ultimate Thread Group",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 60000,
      maxX: 1.58916804e12,
      title: "Active Threads Over Time",
    },
  },
  getOptions: function () {
    return {
      series: {
        stack: true,
        lines: {
          show: true,
          fill: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Number of active threads",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 6,
        show: true,
        container: "#legendActiveThreadsOverTime",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      selection: {
        mode: "xy",
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : At %x there were %y active threads",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesActiveThreadsOverTime")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotActiveThreadsOverTime"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewActiveThreadsOverTime"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
  var infos = activeThreadsOverTimeInfos;
  prepareSeries(infos.data);
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotActiveThreadsOverTime"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesActiveThreadsOverTime");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotActiveThreadsOverTime",
      "#overviewActiveThreadsOverTime"
    );
    $("#footerActiveThreadsOverTime .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var timeVsThreadsInfos = {
  data: {
    result: {
      minY: 13008.500000000002,
      minX: 1.0,
      maxY: 120027.25,
      series: [
        {
          data: [
            [2.0, 17654.222222222223],
            [3.0, 120006.0],
            [4.0, 22705.875],
            [5.0, 120004.0],
            [6.0, 120006.0],
            [7.0, 120005.0],
            [8.0, 13008.500000000002],
            [9.0, 120024.0],
            [10.0, 120026.0],
            [11.0, 120023.0],
            [13.0, 120023.0],
            [15.0, 120024.0],
            [16.0, 43186.666666666664],
            [17.0, 120027.0],
            [21.0, 120027.25],
            [23.0, 120025.0],
            [25.0, 120025.0],
            [26.0, 120027.0],
            [27.0, 118351.0],
            [28.0, 115693.0],
            [29.0, 112937.0],
            [30.0, 110479.0],
            [31.0, 107715.0],
            [32.0, 38585.555555555555],
            [33.0, 102495.0],
            [35.0, 97069.0],
            [34.0, 99727.0],
            [37.0, 91843.0],
            [36.0, 94505.0],
            [39.0, 86621.0],
            [38.0, 89077.0],
            [41.0, 84487.0],
            [40.0, 84375.0],
            [43.0, 84376.0],
            [42.0, 84478.0],
            [45.0, 84174.0],
            [44.0, 84111.0],
            [47.0, 84176.0],
            [46.0, 84069.0],
            [49.0, 79865.0],
            [48.0, 82530.0],
            [51.0, 74763.0],
            [50.0, 77311.0],
            [53.0, 69330.0],
            [52.0, 72099.0],
            [55.0, 64006.0],
            [54.0, 66678.0],
            [57.0, 58896.0],
            [56.0, 61351.0],
            [59.0, 53572.0],
            [58.0, 56232.0],
            [61.0, 48348.0],
            [60.0, 51012.0],
            [63.0, 43129.0],
            [62.0, 45788.0],
            [64.0, 42339.37500000001],
            [1.0, 23047.500000000004],
          ],
          isOverall: false,
          label: "HTTP Request",
          isController: false,
        },
        {
          data: [[26.508771929824558, 62137.491228070176]],
          isOverall: false,
          label: "HTTP Request-Aggregated",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      maxX: 64.0,
      title: "Time VS Threads",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        axisLabel: "Number of active threads",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Average response times in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: { noColumns: 2, show: true, container: "#legendTimeVsThreads" },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to work
      },
      tooltip: true,
      tooltipOpts: {
        content:
          "%s: At %x.2 active threads, Average response time was %y.2 ms",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotTimesVsThreads"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewTimesVsThreads"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Time vs threads
function refreshTimeVsThreads() {
  var infos = timeVsThreadsInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyTimeVsThreads");
    return;
  }
  if (isGraph($("#flotTimesVsThreads"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesTimeVsThreads");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
    $("#footerTimeVsThreads .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var bytesThroughputOverTimeInfos = {
  data: {
    result: {
      minY: 46.8,
      minX: 1.5891678e12,
      maxY: 24211.716666666667,
      series: [
        {
          data: [
            [1.58916792e12, 119.6],
            [1.58916798e12, 119.6],
            [1.5891678e12, 46.8],
            [1.58916786e12, 114.4],
            [1.58916804e12, 948.5666666666667],
          ],
          isOverall: false,
          label: "Bytes received per second",
          isController: false,
        },
        {
          data: [
            [1.58916792e12, 24211.366666666665],
            [1.58916798e12, 24211.716666666667],
            [1.5891678e12, 9474.2],
            [1.58916786e12, 23159.033333333333],
            [1.58916804e12, 11579.416666666666],
          ],
          isOverall: false,
          label: "Bytes sent per second",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 60000,
      maxX: 1.58916804e12,
      title: "Bytes Throughput Over Time",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Bytes / sec",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendBytesThroughputOverTime",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s at %x was %y",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesBytesThroughputOverTime")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotBytesThroughputOverTime"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewBytesThroughputOverTime"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
  var infos = bytesThroughputOverTimeInfos;
  prepareSeries(infos.data);
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotBytesThroughputOverTime"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesBytesThroughputOverTime");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotBytesThroughputOverTime",
      "#overviewBytesThroughputOverTime"
    );
    $("#footerBytesThroughputOverTime .legendColorBox > div").each(function (
      i
    ) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var responseTimesOverTimeInfos = {
  data: {
    result: {
      minY: 4072.6666666666665,
      minX: 1.5891678e12,
      maxY: 115578.05405405408,
      series: [
        {
          data: [
            [1.58916792e12, 34921.0],
            [1.58916798e12, 74677.78260869566],
            [1.5891678e12, 4072.6666666666665],
            [1.58916786e12, 11357.272727272728],
            [1.58916804e12, 115578.05405405408],
          ],
          isOverall: false,
          label: "HTTP Request",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      granularity: 60000,
      maxX: 1.58916804e12,
      title: "Response Time Over Time",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Average response time in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendResponseTimesOverTime",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : at %x Average response time was %y ms",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesResponseTimesOverTime")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotResponseTimesOverTime"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewResponseTimesOverTime"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
  var infos = responseTimesOverTimeInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyResponseTimeOverTime");
    return;
  }
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotResponseTimesOverTime"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesResponseTimesOverTime");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotResponseTimesOverTime",
      "#overviewResponseTimesOverTime"
    );
    $("#footerResponseTimesOverTime .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var latenciesOverTimeInfos = {
  data: {
    result: {
      minY: 4072.222222222222,
      minX: 1.5891678e12,
      maxY: 74677.6956521739,
      series: [
        {
          data: [
            [1.58916792e12, 34920.95652173913],
            [1.58916798e12, 74677.6956521739],
            [1.5891678e12, 4072.222222222222],
            [1.58916786e12, 11357.136363636362],
            [1.58916804e12, 31239.621621621627],
          ],
          isOverall: false,
          label: "HTTP Request",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      granularity: 60000,
      maxX: 1.58916804e12,
      title: "Latencies Over Time",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Average response latencies in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendLatenciesOverTime",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : at %x Average latency was %y ms",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesLatenciesOverTime")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotLatenciesOverTime"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewLatenciesOverTime"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
  var infos = latenciesOverTimeInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyLatenciesOverTime");
    return;
  }
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotLatenciesOverTime"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesLatenciesOverTime");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
    $("#footerLatenciesOverTime .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var connectTimeOverTimeInfos = {
  data: {
    result: {
      minY: 2.2173913043478253,
      minX: 1.5891678e12,
      maxY: 4.888888888888888,
      series: [
        {
          data: [
            [1.58916792e12, 2.2173913043478253],
            [1.58916798e12, 2.8695652173913038],
            [1.5891678e12, 4.888888888888888],
            [1.58916786e12, 2.318181818181818],
            [1.58916804e12, 3.5945945945945956],
          ],
          isOverall: false,
          label: "HTTP Request",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      granularity: 60000,
      maxX: 1.58916804e12,
      title: "Connect Time Over Time",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getConnectTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Average Connect Time in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendConnectTimeOverTime",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : at %x Average connect time was %y ms",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesConnectTimeOverTime")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotConnectTimeOverTime"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewConnectTimeOverTime"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
  var infos = connectTimeOverTimeInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyConnectTimeOverTime");
    return;
  }
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotConnectTimeOverTime"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesConnectTimeOverTime");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotConnectTimeOverTime",
      "#overviewConnectTimeOverTime"
    );
    $("#footerConnectTimeOverTime .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var responseTimePercentilesOverTimeInfos = {
  data: {
    result: {
      minY: 3376.0,
      minX: 1.5891678e12,
      maxY: 118351.0,
      series: [
        {
          data: [
            [1.58916792e12, 48348.0],
            [1.58916798e12, 89077.0],
            [1.5891678e12, 5323.0],
            [1.58916786e12, 21289.0],
            [1.58916804e12, 118351.0],
          ],
          isOverall: false,
          label: "Max",
          isController: false,
        },
        {
          data: [
            [1.58916792e12, 21192.0],
            [1.58916798e12, 51012.0],
            [1.5891678e12, 3376.0],
            [1.58916786e12, 5017.0],
            [1.58916804e12, 91843.0],
          ],
          isOverall: false,
          label: "Min",
          isController: false,
        },
        {
          data: [
            [1.58916792e12, 44724.4],
            [1.58916798e12, 85767.40000000001],
            [1.5891678e12, 5323.0],
            [1.58916786e12, 21183.9],
            [1.58916804e12, 117819.40000000001],
          ],
          isOverall: false,
          label: "90th percentile",
          isController: false,
        },
        {
          data: [
            [1.58916792e12, 48348.0],
            [1.58916798e12, 89077.0],
            [1.5891678e12, 5323.0],
            [1.58916786e12, 21289.0],
            [1.58916804e12, 118351.0],
          ],
          isOverall: false,
          label: "99th percentile",
          isController: false,
        },
        {
          data: [
            [1.58916792e12, 47835.99999999999],
            [1.58916798e12, 88585.79999999999],
            [1.5891678e12, 5323.0],
            [1.58916786e12, 21274.9],
            [1.58916804e12, 118351.0],
          ],
          isOverall: false,
          label: "95th percentile",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 60000,
      maxX: 1.58916804e12,
      title: "Response Time Percentiles Over Time (successful requests only)",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
          fill: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Response Time in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendResponseTimePercentilesOverTime",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : at %x Response time was %y ms",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesResponseTimePercentilesOverTime")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewResponseTimePercentilesOverTime"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
  var infos = responseTimePercentilesOverTimeInfos;
  prepareSeries(infos.data);
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotResponseTimePercentilesOverTime"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotResponseTimePercentilesOverTime",
      "#overviewResponseTimePercentilesOverTime"
    );
    $("#footerResponseTimePercentilesOverTime .legendColorBox > div").each(
      function (i) {
        $(this).clone().prependTo(choiceContainer.find("li").eq(i));
      }
    );
  }
}

var responseTimeVsRequestInfos = {
  data: {
    result: {
      minY: 42136.0,
      minX: 1.0,
      maxY: 120025.0,
      series: [
        {
          data: [[1.0, 42136.0]],
          isOverall: false,
          label: "Successes",
          isController: false,
        },
        {
          data: [
            [1.0, 120006.0],
            [19.0, 120025.0],
          ],
          isOverall: false,
          label: "Failures",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 1000,
      maxX: 19.0,
      title: "Response Time Vs Request",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: false,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        axisLabel: "Global number of requests per second",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Median Response Time in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendResponseTimeVsRequest",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : Median response time at %x req/s was %y ms",
      },
      colors: ["#9ACD32", "#FF6347"],
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesResponseTimeVsRequest")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotResponseTimeVsRequest"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewResponseTimeVsRequest"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
  var infos = responseTimeVsRequestInfos;
  prepareSeries(infos.data);
  if (isGraph($("#flotResponseTimeVsRequest"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesResponseTimeVsRequest");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotResponseTimeVsRequest",
      "#overviewResponseTimeVsRequest"
    );
    $("#footerResponseRimeVsRequest .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var latenciesVsRequestInfos = {
  data: {
    result: {
      minY: 0.0,
      minX: 1.0,
      maxY: 42136.0,
      series: [
        {
          data: [[1.0, 42136.0]],
          isOverall: false,
          label: "Successes",
          isController: false,
        },
        {
          data: [
            [1.0, 0.0],
            [19.0, 0.0],
          ],
          isOverall: false,
          label: "Failures",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 1000,
      maxX: 19.0,
      title: "Latencies Vs Request",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: false,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        axisLabel: "Global number of requests per second",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Median Latency in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendLatencyVsRequest",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : Median Latency time at %x req/s was %y ms",
      },
      colors: ["#9ACD32", "#FF6347"],
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesLatencyVsRequest")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotLatenciesVsRequest"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewLatenciesVsRequest"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
  var infos = latenciesVsRequestInfos;
  prepareSeries(infos.data);
  if (isGraph($("#flotLatenciesVsRequest"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesLatencyVsRequest");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
    $("#footerLatenciesVsRequest .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var hitsPerSecondInfos = {
  data: {
    result: {
      minY: 0.18333333333333332,
      minX: 1.5891678e12,
      maxY: 1.1166666666666667,
      series: [
        {
          data: [
            [1.58916792e12, 1.1166666666666667],
            [1.5891678e12, 0.18333333333333332],
            [1.58916786e12, 0.6],
          ],
          isOverall: false,
          label: "hitsPerSecond",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 60000,
      maxX: 1.58916792e12,
      title: "Hits Per Second",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Number of hits / sec",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendHitsPerSecond",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s at %x was %y.2 hits/sec",
      },
    };
  },
  createGraph: function createGraph() {
    var data = this.data;
    var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotHitsPerSecond"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewHitsPerSecond"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
  var infos = hitsPerSecondInfos;
  prepareSeries(infos.data);
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotHitsPerSecond"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesHitsPerSecond");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
    $("#footerHitsPerSecond .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var codesPerSecondInfos = {
  data: {
    result: {
      minY: 0.15,
      minX: 1.5891678e12,
      maxY: 0.43333333333333335,
      series: [
        {
          data: [
            [1.58916792e12, 0.38333333333333336],
            [1.58916798e12, 0.38333333333333336],
            [1.5891678e12, 0.15],
            [1.58916786e12, 0.36666666666666664],
            [1.58916804e12, 0.18333333333333332],
          ],
          isOverall: false,
          label: "200",
          isController: false,
        },
        {
          data: [[1.58916804e12, 0.43333333333333335]],
          isOverall: false,
          label:
            "Non HTTP response code: org.apache.http.NoHttpResponseException",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 60000,
      maxX: 1.58916804e12,
      title: "Codes Per Second",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Number of responses / sec",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendCodesPerSecond",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "Number of Response Codes %s at %x was %y.2 responses / sec",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotCodesPerSecond"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewCodesPerSecond"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
  var infos = codesPerSecondInfos;
  prepareSeries(infos.data);
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotCodesPerSecond"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesCodesPerSecond");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
    $("#footerCodesPerSecond .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var transactionsPerSecondInfos = {
  data: {
    result: {
      minY: 0.15,
      minX: 1.5891678e12,
      maxY: 0.43333333333333335,
      series: [
        {
          data: [
            [1.58916792e12, 0.38333333333333336],
            [1.58916798e12, 0.38333333333333336],
            [1.5891678e12, 0.15],
            [1.58916786e12, 0.36666666666666664],
            [1.58916804e12, 0.18333333333333332],
          ],
          isOverall: false,
          label: "HTTP Request-success",
          isController: false,
        },
        {
          data: [[1.58916804e12, 0.43333333333333335]],
          isOverall: false,
          label: "HTTP Request-failure",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      granularity: 60000,
      maxX: 1.58916804e12,
      title: "Transactions Per Second",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Number of transactions / sec",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendTransactionsPerSecond",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s at %x was %y transactions / sec",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesTransactionsPerSecond")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotTransactionsPerSecond"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewTransactionsPerSecond"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
  var infos = transactionsPerSecondInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyTransactionsPerSecond");
    return;
  }
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotTransactionsPerSecond"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesTransactionsPerSecond");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotTransactionsPerSecond",
      "#overviewTransactionsPerSecond"
    );
    $("#footerTransactionsPerSecond .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var totalTPSInfos = {
  data: {
    result: {
      minY: 0.15,
      minX: 1.5891678e12,
      maxY: 0.43333333333333335,
      series: [
        {
          data: [
            [1.58916792e12, 0.38333333333333336],
            [1.58916798e12, 0.38333333333333336],
            [1.5891678e12, 0.15],
            [1.58916786e12, 0.36666666666666664],
            [1.58916804e12, 0.18333333333333332],
          ],
          isOverall: false,
          label: "Transaction-success",
          isController: false,
        },
        {
          data: [[1.58916804e12, 0.43333333333333335]],
          isOverall: false,
          label: "Transaction-failure",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      granularity: 60000,
      maxX: 1.58916804e12,
      title: "Total Transactions Per Second",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Number of transactions / sec",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendTotalTPS",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s at %x was %y transactions / sec",
      },
      colors: ["#9ACD32", "#FF6347"],
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotTotalTPS"), dataset, options);
    // setup overview
    $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
  },
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
  var infos = totalTPSInfos;
  // We want to ignore seriesFilter
  prepareSeries(infos.data, false, true);
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotTotalTPS"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesTotalTPS");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
    $("#footerTotalTPS .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed) {
  if (collapsed) {
    $(elem)
      .parent()
      .find(".fa-chevron-up")
      .removeClass("fa-chevron-up")
      .addClass("fa-chevron-down");
  } else {
    $(elem)
      .parent()
      .find(".fa-chevron-down")
      .removeClass("fa-chevron-down")
      .addClass("fa-chevron-up");
    if (elem.id == "bodyBytesThroughputOverTime") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshBytesThroughputOverTime(true);
      }
      document.location.href = "#bytesThroughputOverTime";
    } else if (elem.id == "bodyLatenciesOverTime") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshLatenciesOverTime(true);
      }
      document.location.href = "#latenciesOverTime";
    } else if (elem.id == "bodyCustomGraph") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshCustomGraph(true);
      }
      document.location.href = "#responseCustomGraph";
    } else if (elem.id == "bodyConnectTimeOverTime") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshConnectTimeOverTime(true);
      }
      document.location.href = "#connectTimeOverTime";
    } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshResponseTimePercentilesOverTime(true);
      }
      document.location.href = "#responseTimePercentilesOverTime";
    } else if (elem.id == "bodyResponseTimeDistribution") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshResponseTimeDistribution();
      }
      document.location.href = "#responseTimeDistribution";
    } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshSyntheticResponseTimeDistribution();
      }
      document.location.href = "#syntheticResponseTimeDistribution";
    } else if (elem.id == "bodyActiveThreadsOverTime") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshActiveThreadsOverTime(true);
      }
      document.location.href = "#activeThreadsOverTime";
    } else if (elem.id == "bodyTimeVsThreads") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshTimeVsThreads();
      }
      document.location.href = "#timeVsThreads";
    } else if (elem.id == "bodyCodesPerSecond") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshCodesPerSecond(true);
      }
      document.location.href = "#codesPerSecond";
    } else if (elem.id == "bodyTransactionsPerSecond") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshTransactionsPerSecond(true);
      }
      document.location.href = "#transactionsPerSecond";
    } else if (elem.id == "bodyTotalTPS") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshTotalTPS(true);
      }
      document.location.href = "#totalTPS";
    } else if (elem.id == "bodyResponseTimeVsRequest") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshResponseTimeVsRequest();
      }
      document.location.href = "#responseTimeVsRequest";
    } else if (elem.id == "bodyLatenciesVsRequest") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshLatenciesVsRequest();
      }
      document.location.href = "#latencyVsRequest";
    }
  }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked) {
  var placeholder = document.getElementById(id);

  var cases = $(placeholder).find(":checkbox");
  cases.prop("checked", checked);
  $(cases)
    .parent()
    .children()
    .children()
    .toggleClass("legend-disabled", !checked);

  var choiceContainer;
  if (id == "choicesBytesThroughputOverTime") {
    choiceContainer = $("#choicesBytesThroughputOverTime");
    refreshBytesThroughputOverTime(false);
  } else if (id == "choicesResponseTimesOverTime") {
    choiceContainer = $("#choicesResponseTimesOverTime");
    refreshResponseTimeOverTime(false);
  } else if (id == "choicesResponseCustomGraph") {
    choiceContainer = $("#choicesResponseCustomGraph");
    refreshCustomGraph(false);
  } else if (id == "choicesLatenciesOverTime") {
    choiceContainer = $("#choicesLatenciesOverTime");
    refreshLatenciesOverTime(false);
  } else if (id == "choicesConnectTimeOverTime") {
    choiceContainer = $("#choicesConnectTimeOverTime");
    refreshConnectTimeOverTime(false);
  } else if (id == "choicesResponseTimePercentilesOverTime") {
    choiceContainer = $("#choicesResponseTimePercentilesOverTime");
    refreshResponseTimePercentilesOverTime(false);
  } else if (id == "choicesResponseTimePercentiles") {
    choiceContainer = $("#choicesResponseTimePercentiles");
    refreshResponseTimePercentiles();
  } else if (id == "choicesActiveThreadsOverTime") {
    choiceContainer = $("#choicesActiveThreadsOverTime");
    refreshActiveThreadsOverTime(false);
  } else if (id == "choicesTimeVsThreads") {
    choiceContainer = $("#choicesTimeVsThreads");
    refreshTimeVsThreads();
  } else if (id == "choicesSyntheticResponseTimeDistribution") {
    choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
    refreshSyntheticResponseTimeDistribution();
  } else if (id == "choicesResponseTimeDistribution") {
    choiceContainer = $("#choicesResponseTimeDistribution");
    refreshResponseTimeDistribution();
  } else if (id == "choicesHitsPerSecond") {
    choiceContainer = $("#choicesHitsPerSecond");
    refreshHitsPerSecond(false);
  } else if (id == "choicesCodesPerSecond") {
    choiceContainer = $("#choicesCodesPerSecond");
    refreshCodesPerSecond(false);
  } else if (id == "choicesTransactionsPerSecond") {
    choiceContainer = $("#choicesTransactionsPerSecond");
    refreshTransactionsPerSecond(false);
  } else if (id == "choicesTotalTPS") {
    choiceContainer = $("#choicesTotalTPS");
    refreshTotalTPS(false);
  } else if (id == "choicesResponseTimeVsRequest") {
    choiceContainer = $("#choicesResponseTimeVsRequest");
    refreshResponseTimeVsRequest();
  } else if (id == "choicesLatencyVsRequest") {
    choiceContainer = $("#choicesLatencyVsRequest");
    refreshLatenciesVsRequest();
  }
  var color = checked ? "black" : "#818181";
  if (choiceContainer != null) {
    choiceContainer.find("label").each(function () {
      this.style.color = color;
    });
  }
}
