/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function () {
  $(".click-title").mouseenter(function (e) {
    e.preventDefault();
    this.style.cursor = "pointer";
  });
  $(".click-title").mousedown(function (event) {
    event.preventDefault();
  });

  // Ugly code while this script is shared among several pages
  try {
    refreshHitsPerSecond(true);
  } catch (e) {}
  try {
    refreshResponseTimeOverTime(true);
  } catch (e) {}
  try {
    refreshResponseTimePercentiles();
  } catch (e) {}
});

var responseTimePercentilesInfos = {
  data: {
    result: {
      minY: 3272.0,
      minX: 0.0,
      maxY: 42189.0,
      series: [
        {
          data: [
            [0.0, 3272.0],
            [0.1, 3272.0],
            [0.2, 3272.0],
            [0.3, 3272.0],
            [0.4, 3272.0],
            [0.5, 3272.0],
            [0.6, 3272.0],
            [0.7, 3272.0],
            [0.8, 3272.0],
            [0.9, 3272.0],
            [1.0, 3272.0],
            [1.1, 3272.0],
            [1.2, 3272.0],
            [1.3, 3273.0],
            [1.4, 3273.0],
            [1.5, 3273.0],
            [1.6, 3273.0],
            [1.7, 3273.0],
            [1.8, 3273.0],
            [1.9, 3273.0],
            [2.0, 3273.0],
            [2.1, 3273.0],
            [2.2, 3273.0],
            [2.3, 3273.0],
            [2.4, 3273.0],
            [2.5, 3276.0],
            [2.6, 3276.0],
            [2.7, 3276.0],
            [2.8, 3276.0],
            [2.9, 3276.0],
            [3.0, 3276.0],
            [3.1, 3276.0],
            [3.2, 3276.0],
            [3.3, 3276.0],
            [3.4, 3276.0],
            [3.5, 3276.0],
            [3.6, 3276.0],
            [3.7, 3351.0],
            [3.8, 3351.0],
            [3.9, 3351.0],
            [4.0, 3351.0],
            [4.1, 3351.0],
            [4.2, 3351.0],
            [4.3, 3351.0],
            [4.4, 3351.0],
            [4.5, 3351.0],
            [4.6, 3351.0],
            [4.7, 3351.0],
            [4.8, 3351.0],
            [4.9, 3417.0],
            [5.0, 3417.0],
            [5.1, 3417.0],
            [5.2, 3417.0],
            [5.3, 3417.0],
            [5.4, 3417.0],
            [5.5, 3417.0],
            [5.6, 3417.0],
            [5.7, 3417.0],
            [5.8, 3417.0],
            [5.9, 3417.0],
            [6.0, 3417.0],
            [6.1, 3465.0],
            [6.2, 3465.0],
            [6.3, 3465.0],
            [6.4, 3465.0],
            [6.5, 3465.0],
            [6.6, 3465.0],
            [6.7, 3465.0],
            [6.8, 3465.0],
            [6.9, 3465.0],
            [7.0, 3465.0],
            [7.1, 3465.0],
            [7.2, 3465.0],
            [7.3, 3483.0],
            [7.4, 3483.0],
            [7.5, 3483.0],
            [7.6, 3483.0],
            [7.7, 3483.0],
            [7.8, 3483.0],
            [7.9, 3483.0],
            [8.0, 3483.0],
            [8.1, 3483.0],
            [8.2, 3483.0],
            [8.3, 3483.0],
            [8.4, 3483.0],
            [8.5, 5118.0],
            [8.6, 5118.0],
            [8.7, 5118.0],
            [8.8, 5118.0],
            [8.9, 5118.0],
            [9.0, 5118.0],
            [9.1, 5118.0],
            [9.2, 5118.0],
            [9.3, 5118.0],
            [9.4, 5118.0],
            [9.5, 5118.0],
            [9.6, 5118.0],
            [9.7, 5119.0],
            [9.8, 5119.0],
            [9.9, 5119.0],
            [10.0, 5119.0],
            [10.1, 5119.0],
            [10.2, 5119.0],
            [10.3, 5119.0],
            [10.4, 5119.0],
            [10.5, 5119.0],
            [10.6, 5119.0],
            [10.7, 5119.0],
            [10.8, 5119.0],
            [10.9, 5120.0],
            [11.0, 5120.0],
            [11.1, 5120.0],
            [11.2, 5120.0],
            [11.3, 5120.0],
            [11.4, 5120.0],
            [11.5, 5120.0],
            [11.6, 5120.0],
            [11.7, 5120.0],
            [11.8, 5120.0],
            [11.9, 5120.0],
            [12.0, 5120.0],
            [12.1, 5121.0],
            [12.2, 5121.0],
            [12.3, 5121.0],
            [12.4, 5121.0],
            [12.5, 5121.0],
            [12.6, 5121.0],
            [12.7, 5121.0],
            [12.8, 5121.0],
            [12.9, 5121.0],
            [13.0, 5121.0],
            [13.1, 5121.0],
            [13.2, 5121.0],
            [13.3, 5141.0],
            [13.4, 5141.0],
            [13.5, 5141.0],
            [13.6, 5141.0],
            [13.7, 5141.0],
            [13.8, 5141.0],
            [13.9, 5141.0],
            [14.0, 5141.0],
            [14.1, 5141.0],
            [14.2, 5141.0],
            [14.3, 5141.0],
            [14.4, 5141.0],
            [14.5, 5300.0],
            [14.6, 5300.0],
            [14.7, 5300.0],
            [14.8, 5300.0],
            [14.9, 5300.0],
            [15.0, 5300.0],
            [15.1, 5300.0],
            [15.2, 5300.0],
            [15.3, 5300.0],
            [15.4, 5300.0],
            [15.5, 5300.0],
            [15.6, 5300.0],
            [15.7, 5324.0],
            [15.8, 5324.0],
            [15.9, 5324.0],
            [16.0, 5324.0],
            [16.1, 5324.0],
            [16.2, 5324.0],
            [16.3, 5324.0],
            [16.4, 5324.0],
            [16.5, 5324.0],
            [16.6, 5324.0],
            [16.7, 5324.0],
            [16.8, 5324.0],
            [16.9, 5736.0],
            [17.0, 5736.0],
            [17.1, 5736.0],
            [17.2, 5736.0],
            [17.3, 5736.0],
            [17.4, 5736.0],
            [17.5, 5736.0],
            [17.6, 5736.0],
            [17.7, 5736.0],
            [17.8, 5736.0],
            [17.9, 5736.0],
            [18.0, 5736.0],
            [18.1, 6769.0],
            [18.2, 6769.0],
            [18.3, 6769.0],
            [18.4, 6769.0],
            [18.5, 6769.0],
            [18.6, 6769.0],
            [18.7, 6769.0],
            [18.8, 6769.0],
            [18.9, 6769.0],
            [19.0, 6769.0],
            [19.1, 6769.0],
            [19.2, 6769.0],
            [19.3, 9328.0],
            [19.4, 9328.0],
            [19.5, 9328.0],
            [19.6, 9328.0],
            [19.7, 9328.0],
            [19.8, 9328.0],
            [19.9, 9328.0],
            [20.0, 9328.0],
            [20.1, 9328.0],
            [20.2, 9328.0],
            [20.3, 9328.0],
            [20.4, 9328.0],
            [20.5, 10136.0],
            [20.6, 10136.0],
            [20.7, 10136.0],
            [20.8, 10136.0],
            [20.9, 10136.0],
            [21.0, 10136.0],
            [21.1, 10136.0],
            [21.2, 10136.0],
            [21.3, 10136.0],
            [21.4, 10136.0],
            [21.5, 10136.0],
            [21.6, 10136.0],
            [21.7, 10136.0],
            [21.8, 10136.0],
            [21.9, 10136.0],
            [22.0, 10136.0],
            [22.1, 10136.0],
            [22.2, 10136.0],
            [22.3, 10136.0],
            [22.4, 10136.0],
            [22.5, 10136.0],
            [22.6, 10136.0],
            [22.7, 10136.0],
            [22.8, 10136.0],
            [22.9, 10138.0],
            [23.0, 10138.0],
            [23.1, 10138.0],
            [23.2, 10138.0],
            [23.3, 10138.0],
            [23.4, 10138.0],
            [23.5, 10138.0],
            [23.6, 10138.0],
            [23.7, 10138.0],
            [23.8, 10138.0],
            [23.9, 10138.0],
            [24.0, 10138.0],
            [24.1, 10139.0],
            [24.2, 10139.0],
            [24.3, 10139.0],
            [24.4, 10139.0],
            [24.5, 10139.0],
            [24.6, 10139.0],
            [24.7, 10139.0],
            [24.8, 10139.0],
            [24.9, 10139.0],
            [25.0, 10139.0],
            [25.1, 10139.0],
            [25.2, 10139.0],
            [25.3, 10139.0],
            [25.4, 10140.0],
            [25.5, 10140.0],
            [25.6, 10140.0],
            [25.7, 10140.0],
            [25.8, 10140.0],
            [25.9, 10140.0],
            [26.0, 10140.0],
            [26.1, 10140.0],
            [26.2, 10140.0],
            [26.3, 10140.0],
            [26.4, 10140.0],
            [26.5, 10140.0],
            [26.6, 10237.0],
            [26.7, 10237.0],
            [26.8, 10237.0],
            [26.9, 10237.0],
            [27.0, 10237.0],
            [27.1, 10237.0],
            [27.2, 10237.0],
            [27.3, 10237.0],
            [27.4, 10237.0],
            [27.5, 10237.0],
            [27.6, 10237.0],
            [27.7, 10237.0],
            [27.8, 10338.0],
            [27.9, 10338.0],
            [28.0, 10338.0],
            [28.1, 10338.0],
            [28.2, 10338.0],
            [28.3, 10338.0],
            [28.4, 10338.0],
            [28.5, 10338.0],
            [28.6, 10338.0],
            [28.7, 10338.0],
            [28.8, 10338.0],
            [28.9, 10338.0],
            [29.0, 10341.0],
            [29.1, 10341.0],
            [29.2, 10341.0],
            [29.3, 10341.0],
            [29.4, 10341.0],
            [29.5, 10341.0],
            [29.6, 10341.0],
            [29.7, 10341.0],
            [29.8, 10341.0],
            [29.9, 10341.0],
            [30.0, 10341.0],
            [30.1, 10341.0],
            [30.2, 12161.0],
            [30.3, 12161.0],
            [30.4, 12161.0],
            [30.5, 12161.0],
            [30.6, 12161.0],
            [30.7, 12161.0],
            [30.8, 12161.0],
            [30.9, 12161.0],
            [31.0, 12161.0],
            [31.1, 12161.0],
            [31.2, 12161.0],
            [31.3, 12161.0],
            [31.4, 14818.0],
            [31.5, 14818.0],
            [31.6, 14818.0],
            [31.7, 14818.0],
            [31.8, 14818.0],
            [31.9, 14818.0],
            [32.0, 14818.0],
            [32.1, 14818.0],
            [32.2, 14818.0],
            [32.3, 14818.0],
            [32.4, 14818.0],
            [32.5, 14818.0],
            [32.6, 17382.0],
            [32.7, 17382.0],
            [32.8, 17382.0],
            [32.9, 17382.0],
            [33.0, 17382.0],
            [33.1, 17382.0],
            [33.2, 17382.0],
            [33.3, 17382.0],
            [33.4, 17382.0],
            [33.5, 17382.0],
            [33.6, 17382.0],
            [33.7, 17382.0],
            [33.8, 19836.0],
            [33.9, 19836.0],
            [34.0, 19836.0],
            [34.1, 19836.0],
            [34.2, 19836.0],
            [34.3, 19836.0],
            [34.4, 19836.0],
            [34.5, 19836.0],
            [34.6, 19836.0],
            [34.7, 19836.0],
            [34.8, 19836.0],
            [34.9, 19836.0],
            [35.0, 20684.0],
            [35.1, 20684.0],
            [35.2, 20684.0],
            [35.3, 20684.0],
            [35.4, 20684.0],
            [35.5, 20684.0],
            [35.6, 20684.0],
            [35.7, 20684.0],
            [35.8, 20684.0],
            [35.9, 20684.0],
            [36.0, 20684.0],
            [36.1, 20684.0],
            [36.2, 20790.0],
            [36.3, 20790.0],
            [36.4, 20790.0],
            [36.5, 20790.0],
            [36.6, 20790.0],
            [36.7, 20790.0],
            [36.8, 20790.0],
            [36.9, 20790.0],
            [37.0, 20790.0],
            [37.1, 20790.0],
            [37.2, 20790.0],
            [37.3, 20790.0],
            [37.4, 20888.0],
            [37.5, 20888.0],
            [37.6, 20888.0],
            [37.7, 20888.0],
            [37.8, 20888.0],
            [37.9, 20888.0],
            [38.0, 20888.0],
            [38.1, 20888.0],
            [38.2, 20888.0],
            [38.3, 20888.0],
            [38.4, 20888.0],
            [38.5, 20888.0],
            [38.6, 21096.0],
            [38.7, 21096.0],
            [38.8, 21096.0],
            [38.9, 21096.0],
            [39.0, 21096.0],
            [39.1, 21096.0],
            [39.2, 21096.0],
            [39.3, 21096.0],
            [39.4, 21096.0],
            [39.5, 21096.0],
            [39.6, 21096.0],
            [39.7, 21096.0],
            [39.8, 21194.0],
            [39.9, 21194.0],
            [40.0, 21194.0],
            [40.1, 21194.0],
            [40.2, 21194.0],
            [40.3, 21194.0],
            [40.4, 21194.0],
            [40.5, 21194.0],
            [40.6, 21194.0],
            [40.7, 21194.0],
            [40.8, 21194.0],
            [40.9, 21194.0],
            [41.0, 21195.0],
            [41.1, 21195.0],
            [41.2, 21195.0],
            [41.3, 21195.0],
            [41.4, 21195.0],
            [41.5, 21195.0],
            [41.6, 21195.0],
            [41.7, 21195.0],
            [41.8, 21195.0],
            [41.9, 21195.0],
            [42.0, 21195.0],
            [42.1, 21195.0],
            [42.2, 21196.0],
            [42.3, 21196.0],
            [42.4, 21196.0],
            [42.5, 21196.0],
            [42.6, 21196.0],
            [42.7, 21196.0],
            [42.8, 21196.0],
            [42.9, 21196.0],
            [43.0, 21196.0],
            [43.1, 21196.0],
            [43.2, 21196.0],
            [43.3, 21196.0],
            [43.4, 21403.0],
            [43.5, 21403.0],
            [43.6, 21403.0],
            [43.7, 21403.0],
            [43.8, 21403.0],
            [43.9, 21403.0],
            [44.0, 21403.0],
            [44.1, 21403.0],
            [44.2, 21403.0],
            [44.3, 21403.0],
            [44.4, 21403.0],
            [44.5, 21403.0],
            [44.6, 24009.0],
            [44.7, 24009.0],
            [44.8, 24009.0],
            [44.9, 24009.0],
            [45.0, 24009.0],
            [45.1, 24009.0],
            [45.2, 24009.0],
            [45.3, 24009.0],
            [45.4, 24009.0],
            [45.5, 24009.0],
            [45.6, 24009.0],
            [45.7, 24009.0],
            [45.8, 26568.0],
            [45.9, 26568.0],
            [46.0, 26568.0],
            [46.1, 26568.0],
            [46.2, 26568.0],
            [46.3, 26568.0],
            [46.4, 26568.0],
            [46.5, 26568.0],
            [46.6, 26568.0],
            [46.7, 26568.0],
            [46.8, 26568.0],
            [46.9, 26568.0],
            [47.0, 29123.0],
            [47.1, 29123.0],
            [47.2, 29123.0],
            [47.3, 29123.0],
            [47.4, 29123.0],
            [47.5, 29123.0],
            [47.6, 29123.0],
            [47.7, 29123.0],
            [47.8, 29123.0],
            [47.9, 29123.0],
            [48.0, 29123.0],
            [48.1, 29123.0],
            [48.2, 31787.0],
            [48.3, 31787.0],
            [48.4, 31787.0],
            [48.5, 31787.0],
            [48.6, 31787.0],
            [48.7, 31787.0],
            [48.8, 31787.0],
            [48.9, 31787.0],
            [49.0, 31787.0],
            [49.1, 31787.0],
            [49.2, 31787.0],
            [49.3, 31787.0],
            [49.4, 34342.0],
            [49.5, 34342.0],
            [49.6, 34342.0],
            [49.7, 34342.0],
            [49.8, 34342.0],
            [49.9, 34342.0],
            [50.0, 34342.0],
            [50.1, 34342.0],
            [50.2, 34342.0],
            [50.3, 34342.0],
            [50.4, 34342.0],
            [50.5, 34342.0],
            [50.6, 34342.0],
            [50.7, 36809.0],
            [50.8, 36809.0],
            [50.9, 36809.0],
            [51.0, 36809.0],
            [51.1, 36809.0],
            [51.2, 36809.0],
            [51.3, 36809.0],
            [51.4, 36809.0],
            [51.5, 36809.0],
            [51.6, 36809.0],
            [51.7, 36809.0],
            [51.8, 36809.0],
            [51.9, 39566.0],
            [52.0, 39566.0],
            [52.1, 39566.0],
            [52.2, 39566.0],
            [52.3, 39566.0],
            [52.4, 39566.0],
            [52.5, 39566.0],
            [52.6, 39566.0],
            [52.7, 39566.0],
            [52.8, 39566.0],
            [52.9, 39566.0],
            [53.0, 39566.0],
            [53.1, 41059.0],
            [53.2, 41059.0],
            [53.3, 41059.0],
            [53.4, 41059.0],
            [53.5, 41059.0],
            [53.6, 41059.0],
            [53.7, 41059.0],
            [53.8, 41059.0],
            [53.9, 41059.0],
            [54.0, 41059.0],
            [54.1, 41059.0],
            [54.2, 41059.0],
            [54.3, 41063.0],
            [54.4, 41063.0],
            [54.5, 41063.0],
            [54.6, 41063.0],
            [54.7, 41063.0],
            [54.8, 41063.0],
            [54.9, 41063.0],
            [55.0, 41063.0],
            [55.1, 41063.0],
            [55.2, 41063.0],
            [55.3, 41063.0],
            [55.4, 41063.0],
            [55.5, 41063.0],
            [55.6, 41063.0],
            [55.7, 41063.0],
            [55.8, 41063.0],
            [55.9, 41063.0],
            [56.0, 41063.0],
            [56.1, 41063.0],
            [56.2, 41063.0],
            [56.3, 41063.0],
            [56.4, 41063.0],
            [56.5, 41063.0],
            [56.6, 41063.0],
            [56.7, 41163.0],
            [56.8, 41163.0],
            [56.9, 41163.0],
            [57.0, 41163.0],
            [57.1, 41163.0],
            [57.2, 41163.0],
            [57.3, 41163.0],
            [57.4, 41163.0],
            [57.5, 41163.0],
            [57.6, 41163.0],
            [57.7, 41163.0],
            [57.8, 41163.0],
            [57.9, 41163.0],
            [58.0, 41163.0],
            [58.1, 41163.0],
            [58.2, 41163.0],
            [58.3, 41163.0],
            [58.4, 41163.0],
            [58.5, 41163.0],
            [58.6, 41163.0],
            [58.7, 41163.0],
            [58.8, 41163.0],
            [58.9, 41163.0],
            [59.0, 41163.0],
            [59.1, 41267.0],
            [59.2, 41267.0],
            [59.3, 41267.0],
            [59.4, 41267.0],
            [59.5, 41267.0],
            [59.6, 41267.0],
            [59.7, 41267.0],
            [59.8, 41267.0],
            [59.9, 41267.0],
            [60.0, 41267.0],
            [60.1, 41267.0],
            [60.2, 41267.0],
            [60.3, 41367.0],
            [60.4, 41367.0],
            [60.5, 41367.0],
            [60.6, 41367.0],
            [60.7, 41367.0],
            [60.8, 41367.0],
            [60.9, 41367.0],
            [61.0, 41367.0],
            [61.1, 41367.0],
            [61.2, 41367.0],
            [61.3, 41367.0],
            [61.4, 41367.0],
            [61.5, 41369.0],
            [61.6, 41369.0],
            [61.7, 41369.0],
            [61.8, 41369.0],
            [61.9, 41369.0],
            [62.0, 41369.0],
            [62.1, 41369.0],
            [62.2, 41369.0],
            [62.3, 41369.0],
            [62.4, 41369.0],
            [62.5, 41369.0],
            [62.6, 41369.0],
            [62.7, 41370.0],
            [62.8, 41370.0],
            [62.9, 41370.0],
            [63.0, 41370.0],
            [63.1, 41370.0],
            [63.2, 41370.0],
            [63.3, 41370.0],
            [63.4, 41370.0],
            [63.5, 41370.0],
            [63.6, 41370.0],
            [63.7, 41370.0],
            [63.8, 41370.0],
            [63.9, 41453.0],
            [64.0, 41453.0],
            [64.1, 41453.0],
            [64.2, 41453.0],
            [64.3, 41453.0],
            [64.4, 41453.0],
            [64.5, 41453.0],
            [64.6, 41453.0],
            [64.7, 41453.0],
            [64.8, 41453.0],
            [64.9, 41453.0],
            [65.0, 41453.0],
            [65.1, 41467.0],
            [65.2, 41467.0],
            [65.3, 41467.0],
            [65.4, 41467.0],
            [65.5, 41467.0],
            [65.6, 41467.0],
            [65.7, 41467.0],
            [65.8, 41467.0],
            [65.9, 41467.0],
            [66.0, 41467.0],
            [66.1, 41467.0],
            [66.2, 41467.0],
            [66.3, 41472.0],
            [66.4, 41472.0],
            [66.5, 41472.0],
            [66.6, 41472.0],
            [66.7, 41472.0],
            [66.8, 41472.0],
            [66.9, 41472.0],
            [67.0, 41472.0],
            [67.1, 41472.0],
            [67.2, 41472.0],
            [67.3, 41472.0],
            [67.4, 41472.0],
            [67.5, 41472.0],
            [67.6, 41472.0],
            [67.7, 41472.0],
            [67.8, 41472.0],
            [67.9, 41472.0],
            [68.0, 41472.0],
            [68.1, 41472.0],
            [68.2, 41472.0],
            [68.3, 41472.0],
            [68.4, 41472.0],
            [68.5, 41472.0],
            [68.6, 41472.0],
            [68.7, 41473.0],
            [68.8, 41473.0],
            [68.9, 41473.0],
            [69.0, 41473.0],
            [69.1, 41473.0],
            [69.2, 41473.0],
            [69.3, 41473.0],
            [69.4, 41473.0],
            [69.5, 41473.0],
            [69.6, 41473.0],
            [69.7, 41473.0],
            [69.8, 41473.0],
            [69.9, 41571.0],
            [70.0, 41571.0],
            [70.1, 41571.0],
            [70.2, 41571.0],
            [70.3, 41571.0],
            [70.4, 41571.0],
            [70.5, 41571.0],
            [70.6, 41571.0],
            [70.7, 41571.0],
            [70.8, 41571.0],
            [70.9, 41571.0],
            [71.0, 41571.0],
            [71.1, 41573.0],
            [71.2, 41573.0],
            [71.3, 41573.0],
            [71.4, 41573.0],
            [71.5, 41573.0],
            [71.6, 41573.0],
            [71.7, 41573.0],
            [71.8, 41573.0],
            [71.9, 41573.0],
            [72.0, 41573.0],
            [72.1, 41573.0],
            [72.2, 41573.0],
            [72.3, 41574.0],
            [72.4, 41574.0],
            [72.5, 41574.0],
            [72.6, 41574.0],
            [72.7, 41574.0],
            [72.8, 41574.0],
            [72.9, 41574.0],
            [73.0, 41574.0],
            [73.1, 41574.0],
            [73.2, 41574.0],
            [73.3, 41574.0],
            [73.4, 41574.0],
            [73.5, 41575.0],
            [73.6, 41575.0],
            [73.7, 41575.0],
            [73.8, 41575.0],
            [73.9, 41575.0],
            [74.0, 41575.0],
            [74.1, 41575.0],
            [74.2, 41575.0],
            [74.3, 41575.0],
            [74.4, 41575.0],
            [74.5, 41575.0],
            [74.6, 41575.0],
            [74.7, 41576.0],
            [74.8, 41576.0],
            [74.9, 41576.0],
            [75.0, 41576.0],
            [75.1, 41576.0],
            [75.2, 41576.0],
            [75.3, 41576.0],
            [75.4, 41576.0],
            [75.5, 41576.0],
            [75.6, 41576.0],
            [75.7, 41576.0],
            [75.8, 41576.0],
            [75.9, 41576.0],
            [76.0, 41644.0],
            [76.1, 41644.0],
            [76.2, 41644.0],
            [76.3, 41644.0],
            [76.4, 41644.0],
            [76.5, 41644.0],
            [76.6, 41644.0],
            [76.7, 41644.0],
            [76.8, 41644.0],
            [76.9, 41644.0],
            [77.0, 41644.0],
            [77.1, 41644.0],
            [77.2, 41676.0],
            [77.3, 41676.0],
            [77.4, 41676.0],
            [77.5, 41676.0],
            [77.6, 41676.0],
            [77.7, 41676.0],
            [77.8, 41676.0],
            [77.9, 41676.0],
            [78.0, 41676.0],
            [78.1, 41676.0],
            [78.2, 41676.0],
            [78.3, 41676.0],
            [78.4, 41689.0],
            [78.5, 41689.0],
            [78.6, 41689.0],
            [78.7, 41689.0],
            [78.8, 41689.0],
            [78.9, 41689.0],
            [79.0, 41689.0],
            [79.1, 41689.0],
            [79.2, 41689.0],
            [79.3, 41689.0],
            [79.4, 41689.0],
            [79.5, 41689.0],
            [79.6, 41691.0],
            [79.7, 41691.0],
            [79.8, 41691.0],
            [79.9, 41691.0],
            [80.0, 41691.0],
            [80.1, 41691.0],
            [80.2, 41691.0],
            [80.3, 41691.0],
            [80.4, 41691.0],
            [80.5, 41691.0],
            [80.6, 41691.0],
            [80.7, 41691.0],
            [80.8, 41776.0],
            [80.9, 41776.0],
            [81.0, 41776.0],
            [81.1, 41776.0],
            [81.2, 41776.0],
            [81.3, 41776.0],
            [81.4, 41776.0],
            [81.5, 41776.0],
            [81.6, 41776.0],
            [81.7, 41776.0],
            [81.8, 41776.0],
            [81.9, 41776.0],
            [82.0, 41777.0],
            [82.1, 41777.0],
            [82.2, 41777.0],
            [82.3, 41777.0],
            [82.4, 41777.0],
            [82.5, 41777.0],
            [82.6, 41777.0],
            [82.7, 41777.0],
            [82.8, 41777.0],
            [82.9, 41777.0],
            [83.0, 41777.0],
            [83.1, 41777.0],
            [83.2, 41797.0],
            [83.3, 41797.0],
            [83.4, 41797.0],
            [83.5, 41797.0],
            [83.6, 41797.0],
            [83.7, 41797.0],
            [83.8, 41797.0],
            [83.9, 41797.0],
            [84.0, 41797.0],
            [84.1, 41797.0],
            [84.2, 41797.0],
            [84.3, 41797.0],
            [84.4, 41881.0],
            [84.5, 41881.0],
            [84.6, 41881.0],
            [84.7, 41881.0],
            [84.8, 41881.0],
            [84.9, 41881.0],
            [85.0, 41881.0],
            [85.1, 41881.0],
            [85.2, 41881.0],
            [85.3, 41881.0],
            [85.4, 41881.0],
            [85.5, 41881.0],
            [85.6, 41881.0],
            [85.7, 41881.0],
            [85.8, 41881.0],
            [85.9, 41881.0],
            [86.0, 41881.0],
            [86.1, 41881.0],
            [86.2, 41881.0],
            [86.3, 41881.0],
            [86.4, 41881.0],
            [86.5, 41881.0],
            [86.6, 41881.0],
            [86.7, 41881.0],
            [86.8, 41898.0],
            [86.9, 41898.0],
            [87.0, 41898.0],
            [87.1, 41898.0],
            [87.2, 41898.0],
            [87.3, 41898.0],
            [87.4, 41898.0],
            [87.5, 41898.0],
            [87.6, 41898.0],
            [87.7, 41898.0],
            [87.8, 41898.0],
            [87.9, 41898.0],
            [88.0, 41983.0],
            [88.1, 41983.0],
            [88.2, 41983.0],
            [88.3, 41983.0],
            [88.4, 41983.0],
            [88.5, 41983.0],
            [88.6, 41983.0],
            [88.7, 41983.0],
            [88.8, 41983.0],
            [88.9, 41983.0],
            [89.0, 41983.0],
            [89.1, 41983.0],
            [89.2, 41984.0],
            [89.3, 41984.0],
            [89.4, 41984.0],
            [89.5, 41984.0],
            [89.6, 41984.0],
            [89.7, 41984.0],
            [89.8, 41984.0],
            [89.9, 41984.0],
            [90.0, 41984.0],
            [90.1, 41984.0],
            [90.2, 41984.0],
            [90.3, 41984.0],
            [90.4, 42084.0],
            [90.5, 42084.0],
            [90.6, 42084.0],
            [90.7, 42084.0],
            [90.8, 42084.0],
            [90.9, 42084.0],
            [91.0, 42084.0],
            [91.1, 42084.0],
            [91.2, 42084.0],
            [91.3, 42084.0],
            [91.4, 42084.0],
            [91.5, 42084.0],
            [91.6, 42085.0],
            [91.7, 42085.0],
            [91.8, 42085.0],
            [91.9, 42085.0],
            [92.0, 42085.0],
            [92.1, 42085.0],
            [92.2, 42085.0],
            [92.3, 42085.0],
            [92.4, 42085.0],
            [92.5, 42085.0],
            [92.6, 42085.0],
            [92.7, 42085.0],
            [92.8, 42086.0],
            [92.9, 42086.0],
            [93.0, 42086.0],
            [93.1, 42086.0],
            [93.2, 42086.0],
            [93.3, 42086.0],
            [93.4, 42086.0],
            [93.5, 42086.0],
            [93.6, 42086.0],
            [93.7, 42086.0],
            [93.8, 42086.0],
            [93.9, 42086.0],
            [94.0, 42087.0],
            [94.1, 42087.0],
            [94.2, 42087.0],
            [94.3, 42087.0],
            [94.4, 42087.0],
            [94.5, 42087.0],
            [94.6, 42087.0],
            [94.7, 42087.0],
            [94.8, 42087.0],
            [94.9, 42087.0],
            [95.0, 42087.0],
            [95.1, 42087.0],
            [95.2, 42087.0],
            [95.3, 42087.0],
            [95.4, 42087.0],
            [95.5, 42087.0],
            [95.6, 42087.0],
            [95.7, 42087.0],
            [95.8, 42087.0],
            [95.9, 42087.0],
            [96.0, 42087.0],
            [96.1, 42087.0],
            [96.2, 42087.0],
            [96.3, 42087.0],
            [96.4, 42089.0],
            [96.5, 42089.0],
            [96.6, 42089.0],
            [96.7, 42089.0],
            [96.8, 42089.0],
            [96.9, 42089.0],
            [97.0, 42089.0],
            [97.1, 42089.0],
            [97.2, 42089.0],
            [97.3, 42089.0],
            [97.4, 42089.0],
            [97.5, 42089.0],
            [97.6, 42124.0],
            [97.7, 42124.0],
            [97.8, 42124.0],
            [97.9, 42124.0],
            [98.0, 42124.0],
            [98.1, 42124.0],
            [98.2, 42124.0],
            [98.3, 42124.0],
            [98.4, 42124.0],
            [98.5, 42124.0],
            [98.6, 42124.0],
            [98.7, 42124.0],
            [98.8, 42189.0],
            [98.9, 42189.0],
            [99.0, 42189.0],
            [99.1, 42189.0],
            [99.2, 42189.0],
            [99.3, 42189.0],
            [99.4, 42189.0],
            [99.5, 42189.0],
            [99.6, 42189.0],
            [99.7, 42189.0],
            [99.8, 42189.0],
            [99.9, 42189.0],
          ],
          isOverall: false,
          label: "HTTP Request",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      maxX: 100.0,
      title: "Response Time Percentiles",
    },
  },
  getOptions: function () {
    return {
      series: {
        points: { show: false },
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendResponseTimePercentiles",
      },
      xaxis: {
        tickDecimals: 1,
        axisLabel: "Percentiles",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Percentile value in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : %x.2 percentile was %y ms",
      },
      selection: { mode: "xy" },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesResponseTimePercentiles")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotResponseTimesPercentiles"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewResponseTimesPercentiles"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
  $(function () {
    $(elementId).text("No graph series with filter=" + seriesFilter);
  });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
  var infos = responseTimePercentilesInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyResponseTimePercentiles");
    return;
  }
  if (isGraph($("#flotResponseTimesPercentiles"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesResponseTimePercentiles");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotResponseTimesPercentiles",
      "#overviewResponseTimesPercentiles"
    );
    $("#bodyResponseTimePercentiles .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var responseTimeDistributionInfos = {
  data: {
    result: {
      minY: 1.0,
      minX: 3200.0,
      maxY: 6.0,
      series: [
        {
          data: [
            [9300.0, 1.0],
            [10200.0, 1.0],
            [10100.0, 5.0],
            [10300.0, 2.0],
            [12100.0, 1.0],
            [14800.0, 1.0],
            [17300.0, 1.0],
            [19800.0, 1.0],
            [20600.0, 1.0],
            [20700.0, 1.0],
            [20800.0, 1.0],
            [21000.0, 1.0],
            [21100.0, 3.0],
            [21400.0, 1.0],
            [24000.0, 1.0],
            [26500.0, 1.0],
            [29100.0, 1.0],
            [31700.0, 1.0],
            [34300.0, 1.0],
            [36800.0, 1.0],
            [39500.0, 1.0],
            [41100.0, 2.0],
            [41800.0, 3.0],
            [42100.0, 2.0],
            [42000.0, 6.0],
            [41700.0, 3.0],
            [41600.0, 4.0],
            [41500.0, 5.0],
            [41400.0, 5.0],
            [41300.0, 3.0],
            [41200.0, 1.0],
            [41000.0, 3.0],
            [41900.0, 2.0],
            [3300.0, 1.0],
            [3200.0, 3.0],
            [3400.0, 3.0],
            [5100.0, 5.0],
            [5300.0, 2.0],
            [5700.0, 1.0],
            [6700.0, 1.0],
          ],
          isOverall: false,
          label: "HTTP Request",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      granularity: 100,
      maxX: 42100.0,
      title: "Response Time Distribution",
    },
  },
  getOptions: function () {
    var granularity = this.data.result.granularity;
    return {
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendResponseTimeDistribution",
      },
      xaxis: {
        axisLabel: "Response times in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Number of responses",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      bars: {
        show: true,
        barWidth: this.data.result.granularity,
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: function (label, xval, yval, flotItem) {
          return (
            yval +
            " responses for " +
            label +
            " were between " +
            xval +
            " and " +
            (xval + granularity) +
            " ms"
          );
        },
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot(
      $("#flotResponseTimeDistribution"),
      prepareData(data.result.series, $("#choicesResponseTimeDistribution")),
      options
    );
  },
};

// Response time distribution
function refreshResponseTimeDistribution() {
  var infos = responseTimeDistributionInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyResponseTimeDistribution");
    return;
  }
  if (isGraph($("#flotResponseTimeDistribution"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesResponseTimeDistribution");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    $("#footerResponseTimeDistribution .legendColorBox > div").each(function (
      i
    ) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var syntheticResponseTimeDistributionInfos = {
  data: {
    result: {
      minY: 83.0,
      minX: 2.0,
      ticks: [
        [0, "Requests having \nresponse time <= 500ms"],
        [1, "Requests having \nresponse time > 500ms and <= 1,500ms"],
        [2, "Requests having \nresponse time > 1,500ms"],
        [3, "Requests in error"],
      ],
      maxY: 83.0,
      series: [
        {
          data: [],
          color: "#9ACD32",
          isOverall: false,
          label: "Requests having \nresponse time <= 500ms",
          isController: false,
        },
        {
          data: [],
          color: "yellow",
          isOverall: false,
          label: "Requests having \nresponse time > 500ms and <= 1,500ms",
          isController: false,
        },
        {
          data: [[2.0, 83.0]],
          color: "orange",
          isOverall: false,
          label: "Requests having \nresponse time > 1,500ms",
          isController: false,
        },
        {
          data: [],
          color: "#FF6347",
          isOverall: false,
          label: "Requests in error",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      maxX: 2.0,
      title: "Synthetic Response Times Distribution",
    },
  },
  getOptions: function () {
    return {
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendSyntheticResponseTimeDistribution",
      },
      xaxis: {
        axisLabel: "Response times ranges",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
        tickLength: 0,
        min: -0.5,
        max: 3.5,
      },
      yaxis: {
        axisLabel: "Number of responses",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      bars: {
        show: true,
        align: "center",
        barWidth: 0.25,
        fill: 0.75,
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: function (label, xval, yval, flotItem) {
          return yval + " " + label;
        },
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var options = this.getOptions();
    prepareOptions(options, data);
    options.xaxis.ticks = data.result.ticks;
    $.plot(
      $("#flotSyntheticResponseTimeDistribution"),
      prepareData(
        data.result.series,
        $("#choicesSyntheticResponseTimeDistribution")
      ),
      options
    );
  },
};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
  var infos = syntheticResponseTimeDistributionInfos;
  prepareSeries(infos.data, true);
  if (isGraph($("#flotSyntheticResponseTimeDistribution"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    $("#footerSyntheticResponseTimeDistribution .legendColorBox > div").each(
      function (i) {
        $(this).clone().prependTo(choiceContainer.find("li").eq(i));
      }
    );
  }
}

var activeThreadsOverTimeInfos = {
  data: {
    result: {
      minY: 1.0,
      minX: 1.58912496e12,
      maxY: 15.565217391304348,
      series: [
        {
          data: [
            [1.58912502e12, 4.045454545454546],
            [1.58912496e12, 1.0],
            [1.58912514e12, 15.565217391304348],
            [1.58912508e12, 14.956521739130434],
            [1.5891252e12, 6.0],
          ],
          isOverall: false,
          label: "jp@gc - Ultimate Thread Group",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 60000,
      maxX: 1.5891252e12,
      title: "Active Threads Over Time",
    },
  },
  getOptions: function () {
    return {
      series: {
        stack: true,
        lines: {
          show: true,
          fill: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Number of active threads",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 6,
        show: true,
        container: "#legendActiveThreadsOverTime",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      selection: {
        mode: "xy",
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : At %x there were %y active threads",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesActiveThreadsOverTime")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotActiveThreadsOverTime"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewActiveThreadsOverTime"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
  var infos = activeThreadsOverTimeInfos;
  prepareSeries(infos.data);
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotActiveThreadsOverTime"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesActiveThreadsOverTime");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotActiveThreadsOverTime",
      "#overviewActiveThreadsOverTime"
    );
    $("#footerActiveThreadsOverTime .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var timeVsThreadsInfos = {
  data: {
    result: {
      minY: 8866.555555555555,
      minX: 1.0,
      maxY: 42189.0,
      series: [
        {
          data: [
            [2.0, 8866.555555555555],
            [8.0, 16258.222222222223],
            [9.0, 41689.0],
            [10.0, 41881.0],
            [11.0, 41984.0],
            [12.0, 42087.0],
            [3.0, 41369.0],
            [13.0, 42189.0],
            [14.0, 42084.0],
            [15.0, 42089.0],
            [1.0, 9685.833333333334],
            [4.0, 12093.444444444445],
            [16.0, 35628.717948717946],
            [5.0, 41472.0],
            [6.0, 41644.0],
            [7.0, 41576.0],
          ],
          isOverall: false,
          label: "HTTP Request",
          isController: false,
        },
        {
          data: [[10.373493975903617, 27020.036144578313]],
          isOverall: false,
          label: "HTTP Request-Aggregated",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      maxX: 16.0,
      title: "Time VS Threads",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        axisLabel: "Number of active threads",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Average response times in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: { noColumns: 2, show: true, container: "#legendTimeVsThreads" },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to work
      },
      tooltip: true,
      tooltipOpts: {
        content:
          "%s: At %x.2 active threads, Average response time was %y.2 ms",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotTimesVsThreads"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewTimesVsThreads"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Time vs threads
function refreshTimeVsThreads() {
  var infos = timeVsThreadsInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyTimeVsThreads");
    return;
  }
  if (isGraph($("#flotTimesVsThreads"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesTimeVsThreads");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
    $("#footerTimeVsThreads .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var bytesThroughputOverTimeInfos = {
  data: {
    result: {
      minY: 20.8,
      minX: 1.58912496e12,
      maxY: 24211.766666666666,
      series: [
        {
          data: [
            [1.58912502e12, 114.4],
            [1.58912496e12, 20.8],
            [1.58912514e12, 119.6],
            [1.58912508e12, 119.6],
            [1.5891252e12, 57.2],
          ],
          isOverall: false,
          label: "Bytes received per second",
          isController: false,
        },
        {
          data: [
            [1.58912502e12, 23159.583333333332],
            [1.58912496e12, 4210.333333333333],
            [1.58912514e12, 24211.766666666666],
            [1.58912508e12, 24211.166666666668],
            [1.5891252e12, 11578.616666666667],
          ],
          isOverall: false,
          label: "Bytes sent per second",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 60000,
      maxX: 1.5891252e12,
      title: "Bytes Throughput Over Time",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Bytes / sec",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendBytesThroughputOverTime",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s at %x was %y",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesBytesThroughputOverTime")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotBytesThroughputOverTime"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewBytesThroughputOverTime"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
  var infos = bytesThroughputOverTimeInfos;
  prepareSeries(infos.data);
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotBytesThroughputOverTime"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesBytesThroughputOverTime");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotBytesThroughputOverTime",
      "#overviewBytesThroughputOverTime"
    );
    $("#footerBytesThroughputOverTime .legendColorBox > div").each(function (
      i
    ) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var responseTimesOverTimeInfos = {
  data: {
    result: {
      minY: 3341.25,
      minX: 1.58912496e12,
      maxY: 41650.608695652176,
      series: [
        {
          data: [
            [1.58912502e12, 7364.272727272727],
            [1.58912496e12, 3341.25],
            [1.58912514e12, 41650.608695652176],
            [1.58912508e12, 28349.60869565217],
            [1.5891252e12, 41570.81818181819],
          ],
          isOverall: false,
          label: "HTTP Request",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      granularity: 60000,
      maxX: 1.5891252e12,
      title: "Response Time Over Time",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Average response time in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendResponseTimesOverTime",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : at %x Average response time was %y ms",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesResponseTimesOverTime")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotResponseTimesOverTime"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewResponseTimesOverTime"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
  var infos = responseTimesOverTimeInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyResponseTimeOverTime");
    return;
  }
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotResponseTimesOverTime"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesResponseTimesOverTime");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotResponseTimesOverTime",
      "#overviewResponseTimesOverTime"
    );
    $("#footerResponseTimesOverTime .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var latenciesOverTimeInfos = {
  data: {
    result: {
      minY: 3340.75,
      minX: 1.58912496e12,
      maxY: 41650.608695652176,
      series: [
        {
          data: [
            [1.58912502e12, 7364.227272727273],
            [1.58912496e12, 3340.75],
            [1.58912514e12, 41650.608695652176],
            [1.58912508e12, 28349.565217391304],
            [1.5891252e12, 41570.81818181819],
          ],
          isOverall: false,
          label: "HTTP Request",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      granularity: 60000,
      maxX: 1.5891252e12,
      title: "Latencies Over Time",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Average response latencies in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendLatenciesOverTime",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : at %x Average latency was %y ms",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesLatenciesOverTime")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotLatenciesOverTime"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewLatenciesOverTime"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
  var infos = latenciesOverTimeInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyLatenciesOverTime");
    return;
  }
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotLatenciesOverTime"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesLatenciesOverTime");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
    $("#footerLatenciesOverTime .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var connectTimeOverTimeInfos = {
  data: {
    result: {
      minY: 0.9090909090909091,
      minX: 1.58912496e12,
      maxY: 10.25,
      series: [
        {
          data: [
            [1.58912502e12, 1.0454545454545454],
            [1.58912496e12, 10.25],
            [1.58912514e12, 1.0434782608695654],
            [1.58912508e12, 1.652173913043478],
            [1.5891252e12, 0.9090909090909091],
          ],
          isOverall: false,
          label: "HTTP Request",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      granularity: 60000,
      maxX: 1.5891252e12,
      title: "Connect Time Over Time",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getConnectTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Average Connect Time in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendConnectTimeOverTime",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : at %x Average connect time was %y ms",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesConnectTimeOverTime")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotConnectTimeOverTime"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewConnectTimeOverTime"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
  var infos = connectTimeOverTimeInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyConnectTimeOverTime");
    return;
  }
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotConnectTimeOverTime"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesConnectTimeOverTime");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotConnectTimeOverTime",
      "#overviewConnectTimeOverTime"
    );
    $("#footerConnectTimeOverTime .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var responseTimePercentilesOverTimeInfos = {
  data: {
    result: {
      minY: 3272.0,
      minX: 1.58912496e12,
      maxY: 42189.0,
      series: [
        {
          data: [
            [1.58912502e12, 12161.0],
            [1.58912496e12, 3465.0],
            [1.58912514e12, 42189.0],
            [1.58912508e12, 42124.0],
            [1.5891252e12, 41984.0],
          ],
          isOverall: false,
          label: "Max",
          isController: false,
        },
        {
          data: [
            [1.58912502e12, 3272.0],
            [1.58912496e12, 3273.0],
            [1.58912514e12, 41059.0],
            [1.58912508e12, 14818.0],
            [1.5891252e12, 41267.0],
          ],
          isOverall: false,
          label: "Min",
          isController: false,
        },
        {
          data: [
            [1.58912502e12, 10340.1],
            [1.58912496e12, 3465.0],
            [1.58912514e12, 42088.2],
            [1.58912508e12, 41891.2],
            [1.5891252e12, 41963.4],
          ],
          isOverall: false,
          label: "90th percentile",
          isController: false,
        },
        {
          data: [
            [1.58912502e12, 12161.0],
            [1.58912496e12, 3465.0],
            [1.58912514e12, 42189.0],
            [1.58912508e12, 42124.0],
            [1.5891252e12, 41984.0],
          ],
          isOverall: false,
          label: "99th percentile",
          isController: false,
        },
        {
          data: [
            [1.58912502e12, 11887.999999999996],
            [1.58912496e12, 3465.0],
            [1.58912514e12, 42169.0],
            [1.58912508e12, 42078.8],
            [1.5891252e12, 41984.0],
          ],
          isOverall: false,
          label: "95th percentile",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 60000,
      maxX: 1.5891252e12,
      title: "Response Time Percentiles Over Time (successful requests only)",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
          fill: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Response Time in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendResponseTimePercentilesOverTime",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : at %x Response time was %y ms",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesResponseTimePercentilesOverTime")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewResponseTimePercentilesOverTime"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
  var infos = responseTimePercentilesOverTimeInfos;
  prepareSeries(infos.data);
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotResponseTimePercentilesOverTime"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotResponseTimePercentilesOverTime",
      "#overviewResponseTimePercentilesOverTime"
    );
    $("#footerResponseTimePercentilesOverTime .legendColorBox > div").each(
      function (i) {
        $(this).clone().prependTo(choiceContainer.find("li").eq(i));
      }
    );
  }
}

var responseTimeVsRequestInfos = {
  data: {
    result: {
      minY: 34342.0,
      minX: 1.0,
      maxY: 34342.0,
      series: [
        {
          data: [[1.0, 34342.0]],
          isOverall: false,
          label: "Successes",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 1000,
      maxX: 1.0,
      title: "Response Time Vs Request",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: false,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        axisLabel: "Global number of requests per second",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Median Response Time in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendResponseTimeVsRequest",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : Median response time at %x req/s was %y ms",
      },
      colors: ["#9ACD32", "#FF6347"],
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesResponseTimeVsRequest")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotResponseTimeVsRequest"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewResponseTimeVsRequest"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
  var infos = responseTimeVsRequestInfos;
  prepareSeries(infos.data);
  if (isGraph($("#flotResponseTimeVsRequest"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesResponseTimeVsRequest");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotResponseTimeVsRequest",
      "#overviewResponseTimeVsRequest"
    );
    $("#footerResponseRimeVsRequest .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var latenciesVsRequestInfos = {
  data: {
    result: {
      minY: 34342.0,
      minX: 1.0,
      maxY: 34342.0,
      series: [
        {
          data: [[1.0, 34342.0]],
          isOverall: false,
          label: "Successes",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 1000,
      maxX: 1.0,
      title: "Latencies Vs Request",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: false,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        axisLabel: "Global number of requests per second",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Median Latency in ms",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendLatencyVsRequest",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s : Median Latency time at %x req/s was %y ms",
      },
      colors: ["#9ACD32", "#FF6347"],
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesLatencyVsRequest")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotLatenciesVsRequest"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewLatenciesVsRequest"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
  var infos = latenciesVsRequestInfos;
  prepareSeries(infos.data);
  if (isGraph($("#flotLatenciesVsRequest"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesLatencyVsRequest");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
    $("#footerLatenciesVsRequest .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var hitsPerSecondInfos = {
  data: {
    result: {
      minY: 0.08333333333333333,
      minX: 1.58912496e12,
      maxY: 0.5166666666666667,
      series: [
        {
          data: [
            [1.58912502e12, 0.48333333333333334],
            [1.58912496e12, 0.08333333333333333],
            [1.58912514e12, 0.3],
            [1.58912508e12, 0.5166666666666667],
          ],
          isOverall: false,
          label: "hitsPerSecond",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 60000,
      maxX: 1.58912514e12,
      title: "Hits Per Second",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Number of hits / sec",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendHitsPerSecond",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s at %x was %y.2 hits/sec",
      },
    };
  },
  createGraph: function createGraph() {
    var data = this.data;
    var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotHitsPerSecond"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewHitsPerSecond"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
  var infos = hitsPerSecondInfos;
  prepareSeries(infos.data);
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotHitsPerSecond"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesHitsPerSecond");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
    $("#footerHitsPerSecond .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var codesPerSecondInfos = {
  data: {
    result: {
      minY: 0.06666666666666667,
      minX: 1.58912496e12,
      maxY: 0.38333333333333336,
      series: [
        {
          data: [
            [1.58912502e12, 0.36666666666666664],
            [1.58912496e12, 0.06666666666666667],
            [1.58912514e12, 0.38333333333333336],
            [1.58912508e12, 0.38333333333333336],
            [1.5891252e12, 0.18333333333333332],
          ],
          isOverall: false,
          label: "200",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: false,
      granularity: 60000,
      maxX: 1.5891252e12,
      title: "Codes Per Second",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Number of responses / sec",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendCodesPerSecond",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "Number of Response Codes %s at %x was %y.2 responses / sec",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotCodesPerSecond"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewCodesPerSecond"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
  var infos = codesPerSecondInfos;
  prepareSeries(infos.data);
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotCodesPerSecond"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesCodesPerSecond");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
    $("#footerCodesPerSecond .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var transactionsPerSecondInfos = {
  data: {
    result: {
      minY: 0.06666666666666667,
      minX: 1.58912496e12,
      maxY: 0.38333333333333336,
      series: [
        {
          data: [
            [1.58912502e12, 0.36666666666666664],
            [1.58912496e12, 0.06666666666666667],
            [1.58912514e12, 0.38333333333333336],
            [1.58912508e12, 0.38333333333333336],
            [1.5891252e12, 0.18333333333333332],
          ],
          isOverall: false,
          label: "HTTP Request-success",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      granularity: 60000,
      maxX: 1.5891252e12,
      title: "Transactions Per Second",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Number of transactions / sec",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendTransactionsPerSecond",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s at %x was %y transactions / sec",
      },
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(
      data.result.series,
      $("#choicesTransactionsPerSecond")
    );
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotTransactionsPerSecond"), dataset, options);
    // setup overview
    $.plot(
      $("#overviewTransactionsPerSecond"),
      dataset,
      prepareOverviewOptions(options)
    );
  },
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
  var infos = transactionsPerSecondInfos;
  prepareSeries(infos.data);
  if (infos.data.result.series.length == 0) {
    setEmptyGraph("#bodyTransactionsPerSecond");
    return;
  }
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotTransactionsPerSecond"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesTransactionsPerSecond");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable(
      "#flotTransactionsPerSecond",
      "#overviewTransactionsPerSecond"
    );
    $("#footerTransactionsPerSecond .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

var totalTPSInfos = {
  data: {
    result: {
      minY: 0.06666666666666667,
      minX: 1.58912496e12,
      maxY: 0.38333333333333336,
      series: [
        {
          data: [
            [1.58912502e12, 0.36666666666666664],
            [1.58912496e12, 0.06666666666666667],
            [1.58912514e12, 0.38333333333333336],
            [1.58912508e12, 0.38333333333333336],
            [1.5891252e12, 0.18333333333333332],
          ],
          isOverall: false,
          label: "Transaction-success",
          isController: false,
        },
        {
          data: [],
          isOverall: false,
          label: "Transaction-failure",
          isController: false,
        },
      ],
      supportsControllersDiscrimination: true,
      granularity: 60000,
      maxX: 1.5891252e12,
      title: "Total Transactions Per Second",
    },
  },
  getOptions: function () {
    return {
      series: {
        lines: {
          show: true,
        },
        points: {
          show: true,
        },
      },
      xaxis: {
        mode: "time",
        timeformat: getTimeFormat(this.data.result.granularity),
        axisLabel: getElapsedTimeLabel(this.data.result.granularity),
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      yaxis: {
        axisLabel: "Number of transactions / sec",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: "Verdana, Arial",
        axisLabelPadding: 20,
      },
      legend: {
        noColumns: 2,
        show: true,
        container: "#legendTotalTPS",
      },
      selection: {
        mode: "xy",
      },
      grid: {
        hoverable: true, // IMPORTANT! this is needed for tooltip to
        // work
      },
      tooltip: true,
      tooltipOpts: {
        content: "%s at %x was %y transactions / sec",
      },
      colors: ["#9ACD32", "#FF6347"],
    };
  },
  createGraph: function () {
    var data = this.data;
    var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
    var options = this.getOptions();
    prepareOptions(options, data);
    $.plot($("#flotTotalTPS"), dataset, options);
    // setup overview
    $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
  },
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
  var infos = totalTPSInfos;
  // We want to ignore seriesFilter
  prepareSeries(infos.data, false, true);
  if (fixTimestamps) {
    fixTimeStamps(infos.data.result.series, 28800000);
  }
  if (isGraph($("#flotTotalTPS"))) {
    infos.createGraph();
  } else {
    var choiceContainer = $("#choicesTotalTPS");
    createLegend(choiceContainer, infos);
    infos.createGraph();
    setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
    $("#footerTotalTPS .legendColorBox > div").each(function (i) {
      $(this).clone().prependTo(choiceContainer.find("li").eq(i));
    });
  }
}

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed) {
  if (collapsed) {
    $(elem)
      .parent()
      .find(".fa-chevron-up")
      .removeClass("fa-chevron-up")
      .addClass("fa-chevron-down");
  } else {
    $(elem)
      .parent()
      .find(".fa-chevron-down")
      .removeClass("fa-chevron-down")
      .addClass("fa-chevron-up");
    if (elem.id == "bodyBytesThroughputOverTime") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshBytesThroughputOverTime(true);
      }
      document.location.href = "#bytesThroughputOverTime";
    } else if (elem.id == "bodyLatenciesOverTime") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshLatenciesOverTime(true);
      }
      document.location.href = "#latenciesOverTime";
    } else if (elem.id == "bodyCustomGraph") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshCustomGraph(true);
      }
      document.location.href = "#responseCustomGraph";
    } else if (elem.id == "bodyConnectTimeOverTime") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshConnectTimeOverTime(true);
      }
      document.location.href = "#connectTimeOverTime";
    } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshResponseTimePercentilesOverTime(true);
      }
      document.location.href = "#responseTimePercentilesOverTime";
    } else if (elem.id == "bodyResponseTimeDistribution") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshResponseTimeDistribution();
      }
      document.location.href = "#responseTimeDistribution";
    } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshSyntheticResponseTimeDistribution();
      }
      document.location.href = "#syntheticResponseTimeDistribution";
    } else if (elem.id == "bodyActiveThreadsOverTime") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshActiveThreadsOverTime(true);
      }
      document.location.href = "#activeThreadsOverTime";
    } else if (elem.id == "bodyTimeVsThreads") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshTimeVsThreads();
      }
      document.location.href = "#timeVsThreads";
    } else if (elem.id == "bodyCodesPerSecond") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshCodesPerSecond(true);
      }
      document.location.href = "#codesPerSecond";
    } else if (elem.id == "bodyTransactionsPerSecond") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshTransactionsPerSecond(true);
      }
      document.location.href = "#transactionsPerSecond";
    } else if (elem.id == "bodyTotalTPS") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshTotalTPS(true);
      }
      document.location.href = "#totalTPS";
    } else if (elem.id == "bodyResponseTimeVsRequest") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshResponseTimeVsRequest();
      }
      document.location.href = "#responseTimeVsRequest";
    } else if (elem.id == "bodyLatenciesVsRequest") {
      if (isGraph($(elem).find(".flot-chart-content")) == false) {
        refreshLatenciesVsRequest();
      }
      document.location.href = "#latencyVsRequest";
    }
  }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked) {
  var placeholder = document.getElementById(id);

  var cases = $(placeholder).find(":checkbox");
  cases.prop("checked", checked);
  $(cases)
    .parent()
    .children()
    .children()
    .toggleClass("legend-disabled", !checked);

  var choiceContainer;
  if (id == "choicesBytesThroughputOverTime") {
    choiceContainer = $("#choicesBytesThroughputOverTime");
    refreshBytesThroughputOverTime(false);
  } else if (id == "choicesResponseTimesOverTime") {
    choiceContainer = $("#choicesResponseTimesOverTime");
    refreshResponseTimeOverTime(false);
  } else if (id == "choicesResponseCustomGraph") {
    choiceContainer = $("#choicesResponseCustomGraph");
    refreshCustomGraph(false);
  } else if (id == "choicesLatenciesOverTime") {
    choiceContainer = $("#choicesLatenciesOverTime");
    refreshLatenciesOverTime(false);
  } else if (id == "choicesConnectTimeOverTime") {
    choiceContainer = $("#choicesConnectTimeOverTime");
    refreshConnectTimeOverTime(false);
  } else if (id == "choicesResponseTimePercentilesOverTime") {
    choiceContainer = $("#choicesResponseTimePercentilesOverTime");
    refreshResponseTimePercentilesOverTime(false);
  } else if (id == "choicesResponseTimePercentiles") {
    choiceContainer = $("#choicesResponseTimePercentiles");
    refreshResponseTimePercentiles();
  } else if (id == "choicesActiveThreadsOverTime") {
    choiceContainer = $("#choicesActiveThreadsOverTime");
    refreshActiveThreadsOverTime(false);
  } else if (id == "choicesTimeVsThreads") {
    choiceContainer = $("#choicesTimeVsThreads");
    refreshTimeVsThreads();
  } else if (id == "choicesSyntheticResponseTimeDistribution") {
    choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
    refreshSyntheticResponseTimeDistribution();
  } else if (id == "choicesResponseTimeDistribution") {
    choiceContainer = $("#choicesResponseTimeDistribution");
    refreshResponseTimeDistribution();
  } else if (id == "choicesHitsPerSecond") {
    choiceContainer = $("#choicesHitsPerSecond");
    refreshHitsPerSecond(false);
  } else if (id == "choicesCodesPerSecond") {
    choiceContainer = $("#choicesCodesPerSecond");
    refreshCodesPerSecond(false);
  } else if (id == "choicesTransactionsPerSecond") {
    choiceContainer = $("#choicesTransactionsPerSecond");
    refreshTransactionsPerSecond(false);
  } else if (id == "choicesTotalTPS") {
    choiceContainer = $("#choicesTotalTPS");
    refreshTotalTPS(false);
  } else if (id == "choicesResponseTimeVsRequest") {
    choiceContainer = $("#choicesResponseTimeVsRequest");
    refreshResponseTimeVsRequest();
  } else if (id == "choicesLatencyVsRequest") {
    choiceContainer = $("#choicesLatencyVsRequest");
    refreshLatenciesVsRequest();
  }
  var color = checked ? "black" : "#818181";
  if (choiceContainer != null) {
    choiceContainer.find("label").each(function () {
      this.style.color = color;
    });
  }
}
